# Name: aws_doubletake.sh v2.5
# AUTHOR: michael.quintero@rackspace.com
# PURPOSE: Intel retrieval from AWS instances with SSM working. Also, for grabbing QC reports.
# FEATURES: Displays instance hostname, uptime, kernel version, crowdstrike status and version, last 5 reboots, and recent updates. User provides an input file with the instance ids to be used. But wait, there's more! Now with 100% MORE QC REPORT!
# Usage: Make sure you have the aws cli installed and are using the proper aws account credentials. run 'bash aws_doubletake.sh' and answer some questions.

verbose=${VERBOSE:-0}

# I've Base64 encoded the Linux_Patcher_v258-b.sh script so that it won't need to be downloaded, to exclude the internet access requirement
# This was done instead of passing all the logic from the qc function as an SSM command. I could run just a couple of items from the QC function, but the report that is generated makes tickets look nicer.
LINUX_PATCHER_B64="IyBTY3JpcHQgTmFtZTogbGludXhfcGF0Y2hlcgojIFZlcnNpb246IDIuNS45CiMgQXV0aG9yOiBt
aWNoYWVsLnF1aW50ZXJvQHJhY2tzcGFjZS5jb20KIyBEZXNjcmlwdGlvbjogVGhpcyBzY3JpcHQg
Y2FuIGhlbHAgYXV0b21hdGUgbXVjaCBpZiBub3QgYWxsIG9mIGEgcGF0Y2hpbmcgcHJvY2Vzcy4g
SXQgZmVhdHVyZXMgYW4gb3B0aW9uIHNldCBmb3IgcnVubmluZyBvbiBmdWxsIGF1dG8sIG9yIGV2
ZW4ganVzdCBhIHF1aWNrIFFDIGNoZWNrLCBhbmQgZ2VuZXJhdGVzIGEgbG9nIGZpbGUgaW4gdGhl
ICRDSEFOR0UgZGlyZWN0b3J5LiAKIyBIYXMgbG9naWMgdG8gZGV0ZXJtaW5lIGlmIHRoZSBwYXRj
aCBhbmQgcmVib290IGhhcyBhbHJlYWR5IG9jY3VycmVkIGFuZCB3aWxsIGNvbnRpbnVlIHdpdGgg
dGhlIHJlYW1pbmluZyBwb3J0aW9uIG9mIHRoZSBwYXRjaCBwcm9jZXNzLCBhZnRlciByZWJvb3Qu
IFRoaXMgdmVyc2lvbiBzdXBwb3J0cyBSZWRoYXQgdmVyc2lvbnMgNy05LCBBbWF6b24gTGludXgs
IGFuZCBEZWJpYW4vVWJ1bnR1LgojIEFMV0FZUyBVU0UgVEhFIEZVTEwgS0VSTkVMIE5BTUUgV0hF
TiBTUEVDSUZZSU5HIEEgS0VSTkVMIFRPIFVTRSEhISEgRm9yIGV4YW1wbGUsIHdpdGggUkhFTCBk
aXN0cm9zLCB5b3Ugd2lsbCBzZXQgdGhlIC1rIGZsYWcgd2l0aCAna2VybmVsLTQuMTguMC01MTMu
MjQuMS5lbDhfOScuIERvIG5vdCB1c2UgJzQuMTguMC01MTMuMjQuMS5lbDhfOScgb3Igbm90aGlu
ZyB3aWxsIGhhcHBlbiEKIyBVc2FnZTogV2hlbiBydW5uaW5nIHRoZSBzY3JpcHQsIHlvdSBuZWVk
IHRvIGJlIHJvb3QuIEFsc28sIHlvdSB3aWxsIEFMV0FZUyBuZWVkIHRvIHNldCB0aGUgJy1jJyBj
aGFuZ2Ugc3dpdGNoLgojIEJ5IGRlc2lnbiBhcyBhIGZhaWxzYWZlLCB0aGUgUUMgZnVuY3Rpb24g
aXMgc2V0IHRvIHJ1biBpZiB5b3UgaW52b2tlICdsaW51eF9wYXRjaGVyIC1jIENIRzAxMjM0NTYn
IHdpdGggbm8gb3RoZXIgc3dpdGNoZXMuIEkgaGF2ZSBsZWZ0IHRoZSAnLXEnIHN3aXRjaCBmb3Ig
dGhlIHVzZXIgdG8gaW50ZW50aW9uYWxseSBpbnZva2UgdGhvdWdoLCBmb3IgaW5jcmVhc2VkIHVz
YWJpbGl0eS4gCiMgVG8gT05MWSBjcmVhdGUgdGhlIHBhdGNobWUgc2NyaXB0LCBydW4gJ2Jhc2gg
bGludXhfcGF0Y2hlciAtYyBDSEcwMTIzNDU2IC1rICRNWV9LRVJORUwnCiMgVG8gT05MWSBpbnN0
YWxsIGEgc3BlY2lmaWVkIGtlcm5lbCBvbiB0aGUgc3lzdGVtIGFuZCBub3QgcGVyZm9ybSBhbnkg
cGF0Y2hpbmcsIHJ1biAnYmFzaCBsaW51eF9wYXRjaGVyIC1jIENIRzAxMjM0NTYgLWsgJE1ZX0tF
Uk5FTCAtYScuIAojIFRvIHJlYm9vdCBpbW1lZGlhdGVseSBhZnRlciB0aGUga2VybmVsIGluc3Rh
bGwgb3IgcGF0Y2ggcnVuLCB5b3UgbmVlZCB0byBzcGVjaWZ5IHN1Y2ggdXNpbmcgJy1yJywgbGlr
ZSBzbyAnYmFzaCBsaW51eF9wYXRjaGVyIC1jIENIRzAxMjM0NTYgLXIgLWsgJE1ZX0tFUk5FTCAt
YScgb3IgJ2Jhc2ggbGludXhfcGF0Y2hlciAtYyBDSEcwMTIzNDU2IC1yIC1hJywgcmVzcGVjdGl2
ZWx5LgojIFRoZSBzY3JpcHQgd2lsbCBOT1QgcmVib290IG9uIGl0cyBvd24hISEhISEhISEhISEh
ISEhISEhISEhIFRoZSAnLXInIGZsYWcgbmVlZHMgdG8gYmUgc2V0IHRvIGRvIHNvLgojIExhc3Rs
eSwgaWYgeW91IHdhbnQgdG8gcGVyZm9ybSBwYXRjaGluZyBvZiB0aGUgaW5zdGFuY2UuLi53aGlj
aCBmb3IgcmVkaGF0IGlzIGp1c3QgdGhlIHNlY3VyaXR5IHBhY2thZ2VzIGFuZCBmb3IgVWJ1bnR1
IGlzIGFsbCBwYWNrYWdlcywgcnVuICdiYXNoIGxpbnV4X3BhdGNoZXIgLWMgQ0hHMDEyMzQ1NiAt
YScuCiMgQWZ0ZXIgcGVyZm9ybWluZyBhIG1hbnVhbCBwYXRjaCwgeW91IGNhbiBydW4gd2l0aCB0
aGUgICctcCcgc3dpdGNoIGlmIHlvdSBkb24ndCByZWJvb3QsIHRvIGdlbmVyYXRlIHRoZSBtYWlu
dGVuYW5jZSByZXBvcnQsICdiYXNoIGxpbnV4X3BhdGNoZXIgLWMgQ0hHMDEyMzQ1NiAtcCcgb3Ig
aWYgeW91IGRvIHJlYm9vdCwgeW91IGNhbiB1c2UgdGhlICctYScgc3dpdGNoZSwgYW5kIHRoZSBz
Y3JpcHQgd2lsbCBwaWNrIHVwIHdoZXJlIGl0IGxlZnQgb2ZmLgoKIyEvYmluL2Jhc2gKCiMgQmV0
dGVyIGJlIHRoZSByb290IHVzZXIgb3RoZXJ3aXNlLCBubyBkaWNlIQppZiBbWyAiJEVVSUQiIC1u
ZSAwIF1dOyB0aGVuCiAgIGVjaG8gIllPVSBORUVEIFRPIFJVTiBUSEUgU0NSSVBUIEFTIFJPT1Qs
IFRSWSBBR0FJTiEiIAogICBleGl0IDEKZmkKCnNpbGVudF9tb2RlPTAKCiMgR290dGEgZmlndXJl
IG91dCB3aG8geW91IGFyZS4gVGhpcyBpcyBhIGJpZyBkb2cgZnVuY3Rpb24uCmRpc3Ryb19iYWxs
KCkgewogICAgaWYgWyAtZiAvZXRjL29zLXJlbGVhc2UgXTsgdGhlbgogICAgICAgIC4gL2V0Yy9v
cy1yZWxlYXNlCiAgICAgICAgZGlzX3ZlcnNpb249JFZFUlNJT05fSUQKICAgICAgICBkaXNfbmFt
ZT0kSUQKICAgICAgICBlY2hvICJERVRFQ1RFRCBESVNUUklCVVRJT046ICRkaXNfbmFtZSwgVkVS
U0lPTjogJGRpc192ZXJzaW9uIgogICAgZWxzZQogICAgICAgIGVjaG8gIkNBTk5PVCBERVRFUk1J
TkUgVEhFIERJU1RSSUJVVElPTiBPUiBWRVJTSU9OLiIKICAgICAgICByZXR1cm4gMQogICAgZmkK
CiMgUHJpbWFyeSBpZGVudGlmaWNhdGlvbiBsb2dpYyBmb3IgdGhlIGRpc3Ryb3MgbGl2ZXMgaGVy
ZS4gVHJlYWQgY2FyZWZ1bGx5Li4udGhlIGdsb2JhbCB2YXJpYWJsZSAncGFja2FnZV9tYW5hZ2Vy
JyBsaXZlcyBoZXJlLgogICAgY2FzZSAkZGlzX25hbWUgaW4KICAgICAgICByaGVsfGNlbnRvc3xm
ZWRvcmF8YW16bnxvbCkKICAgICAgICAgICAgZXhwb3J0IHBhY2thZ2VfbWFuYWdlcj0ieXVtIgog
ICAgICAgICAgICBpZiBbWyAiJGRpc19uYW1lIiA9PSAiYW16biIgfHwgIiRkaXNfbmFtZSIgPT0g
Im9sIiBdXTsgdGhlbgogICAgICAgICAgICAgICAgZWNobyAiJChncmVwICJeUFJFVFRZX05BTUU9
IiAvZXRjL29zLXJlbGVhc2UgfCBjdXQgLWQnIicgLWYyKSIKICAgICAgICAgICAgZWxzZQogICAg
ICAgICAgICAgICAgZWNobyAiUmVkIEhhdCBWZXJzaW9uIDogJChjYXQgL2V0Yy9yZWRoYXQtcmVs
ZWFzZSkiCiAgICAgICAgICAgIGZpCiAgICAgICAgICAgIGVjaG8gIkN1cnJlbnQgS2VybmVsOiAk
KHVuYW1lIC1yKSIKICAgICAgICAgICAgbmV4dF9rZXJuZWw9JCh5dW0gY2hlY2stdXBkYXRlIGtl
cm5lbCB8IGdyZXAgLUUgJ2tlcm5lbC54ODZfNjQqJyB8IGF3ayAne3ByaW50ICQyfScpCiAgICAg
ICAgICAgIFtbIC16ICIkbmV4dF9rZXJuZWwiIF1dICYmIGVjaG8gIk5vIG5ldyBrZXJuZWwgdmVy
c2lvbiBhdmFpbGFibGUuIiB8fCBlY2hvICJOZXh0IEtlcm5lbCBWZXJzaW9uOiAke25leHRfa2Vy
bmVsfSIKICAgICAgICAgICAgJHBhY2thZ2VfbWFuYWdlciB1cGRhdGVpbmZvIGxpc3Qgc2VjdXJp
dHkgaW5zdGFsbGVkIHwgZ3JlcCBSSFNBID4gL3Jvb3QvJENIQU5HRS9zZWN1cml0eV9pbnN0YWxs
ZWQuYmVmb3JlCiAgICAgICAgICAgIDs7CiAgICAgICAgZGViaWFufHVidW50dSkKICAgICAgICAg
ICAgZXhwb3J0IHBhY2thZ2VfbWFuYWdlcj0iYXB0IgogICAgICAgICAgICBlY2hvICIkKGdyZXAg
Il5QUkVUVFlfTkFNRT0iIC9ldGMvb3MtcmVsZWFzZSB8IGN1dCAtZCciJyAtZjIpIgogICAgICAg
ICAgICBlY2hvICJDdXJyZW50IEtlcm5lbDogJCh1bmFtZSAtcikiCiAgICAgICAgICAgIG5leHRf
a2VybmVsPSQoYXB0LWdldCB1cGRhdGUgPiAvZGV2L251bGw7IGFwdC1nZXQgLS1qdXN0LXByaW50
IHVwZ3JhZGUgfCBncmVwIC1pIGxpbnV4LWltYWdlKQogICAgICAgICAgICBbWyAteiAiJG5leHRf
a2VybmVsIiBdXSAmJiBlY2hvICJObyBuZXcga2VybmVsIHZlcnNpb24gYXZhaWxhYmxlLiIgfHwg
ZWNobyAiTmV4dCBLZXJuZWwgVmVyc2lvbjogJHtuZXh0X2tlcm5lbH0iCiAgICAgICAgICAgIDs7
CiAgICAgICAgKikKICAgICAgICAgICAgZWNobyAiVU5TVVBQT1JURUQgRElTVFJJQlVUSU9OOiAk
ZGlzX25hbWUiCiAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgICAgIDs7CiAgICBlc2FjCn0K
CiMgRnVuY3Rpb24gd2hlcmUgbW9zdCBvZiB0aGUgdXBkYXRpbmcgaGFwcGVucy4gVXNlZCB0byBi
ZSBjYWxsZWQsIEZhbGNvbl9jaGVja2VyLCBidXQgaXQncyBiZWVuIGV4YXBhbmRlZCB0byB0YWtl
IG9uIG1vcmUgd29yay4KbW9kZXJuaXplKCkgewogICAgaWYgW1sgLW4gIiRLZXJuZWwiIF1dOyB0
aGVuCiAgICAgICAgaWYgW1sgIiRwYWNrYWdlX21hbmFnZXIiID09ICJ5dW0iIF1dOyB0aGVuCiAg
ICAgICAgICAgIGVjaG8gIkluc3RhbGxpbmcgc3BlY2lmaWMga2VybmVsIHZlcnNpb24gJEtlcm5l
bCBvbiBSSEVMLWJhc2VkIGRpc3RyaWJ1dGlvbi4iCiAgICAgICAgICAgICRwYWNrYWdlX21hbmFn
ZXIgaW5zdGFsbCAkS2VybmVsIC15CiAgICAgICAgZWxpZiBbWyAiJHBhY2thZ2VfbWFuYWdlciIg
PT0gImFwdCIgXV07IHRoZW4KICAgICAgICAgICAgZWNobyAiSW5zdGFsbGluZyBzcGVjaWZpYyBr
ZXJuZWwgdmVyc2lvbiAkS2VybmVsIG9uIERlYmlhbi1iYXNlZCBkaXN0cmlidXRpb24uIgogICAg
ICAgICAgICAkcGFja2FnZV9tYW5hZ2VyIGluc3RhbGwgJEtlcm5lbCAteQogICAgICAgIGVsc2UK
ICAgICAgICAgICAgZWNobyAiVW5zdXBwb3J0ZWQgcGFja2FnZSBtYW5hZ2VyIG9yIGRpc3RyaWJ1
dGlvbi4iCiAgICAgICAgZmkKICAgICAgICByZXR1cm4KICAgIGZpCgogICAgaWYgcGdyZXAgLWYg
Ii9vcHQvQ3Jvd2RTdHJpa2UvZmFsY29uZCIgPiAvZGV2L251bGwgMj4mMTsgdGhlbgogICAgICAg
IGVjaG8gIkZBTENPTkNUTCBJUyBSVU5OSU5HLiBDSEVDS0lORyBLRVJORUwgVkVSU0lPTiBDT01Q
QVRBQklMSVRZLiIKICAgICAgICBuZXh0X2tlcm5lbF92ZXJzaW9uPSQoJHBhY2thZ2VfbWFuYWdl
ciBjaGVjay11cGRhdGUga2VybmVsIHwgZ3JlcCAtRSAna2VybmVsLng4Nl82NConIHwgYXdrICd7
cHJpbnQgJDJ9JykKCiAgICAgICAgaWYgW1sgLXogIiRuZXh0X2tlcm5lbF92ZXJzaW9uIiBdXTsg
dGhlbgogICAgICAgICAgICBlY2hvICJOTyBLRVJORUwgVVBEQVRFUyBGT1VORC4gUlVOTklORyAk
cGFja2FnZV9tYW5hZ2VyIHVwZGF0ZS1taW5pbWFsIFdJVEggS0VSTkVMIEVYQ0xVU0lPTi4iCiAg
ICAgICAgICAgICRwYWNrYWdlX21hbmFnZXIgdXBkYXRlLW1pbmltYWwgLS1zZWN1cml0eSAtLWV4
Y2x1ZGU9a2VybmVsKiAteQogICAgICAgICAgICByZXR1cm4gCiAgICAgICAgZmkKCiAgICAgICAg
ZmFsY29uX2NoZWNrX291dHB1dD0kKC9vcHQvQ3Jvd2RTdHJpa2UvZmFsY29uLWtlcm5lbC1jaGVj
ayAtayAiJG5leHRfa2VybmVsX3ZlcnNpb24iIDI+JjEpCiAgICAgICAgaWYgZWNobyAiJGZhbGNv
bl9jaGVja19vdXRwdXQiIHwgZ3JlcCAtcSAiaXMgbm90IHN1cHBvcnRlZCBieSBTZW5zb3IiOyB0
aGVuCiAgICAgICAgICAgIGVjaG8gIlRIRSBORVdFU1QgQVZBSUxBQkxFIEtFUk5FTCBWRVJTSU9O
IElTIE5PVCBTVVBQT1JURUQgQlkgRkFMQ09OIFNFTlNPUi4gUlVOTklORyAkcGFja2FnZV9tYW5h
Z2VyIFVQREFURSBXSVRIIEtFUk5FTCBFWENMVVNJT04uIgogICAgICAgICAgICAkcGFja2FnZV9t
YW5hZ2VyIHVwZGF0ZS1taW5pbWFsIC0tc2VjdXJpdHkgLS1leGNsdWRlPWtlcm5lbCogLXkKICAg
ICAgICBlbGlmIGVjaG8gIiRmYWxjb25fY2hlY2tfb3V0cHV0IiB8IGdyZXAgLXEgIkNST1dEU1RS
SUtFIE5PVCBGT1VORCI7IHRoZW4KICAgICAgICAgICAgZWNobyAiQ1JPV0RTVFJJS0UgQ09NTUFO
RCBGQUlMVVJFOiBDUk9XRFNUUklLRSBOT1QgRk9VTkQuIgogICAgICAgICAgICAkcGFja2FnZV9t
YW5hZ2VyIHVwZGF0ZSAtLXNlY3VyaXR5IC15CiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hv
ICJORVhUIEtFUk5FTCBWRVJTSU9OIElTIFNVUFBPUlRFRCBCWSBGQUxDT04gU0VOU09SLiBSVU5O
SU5HIEZVTEwgJHBhY2thZ2VfbWFuYWdlciBVUERBVEUuIgogICAgICAgICAgICAkcGFja2FnZV9t
YW5hZ2VyIHVwZGF0ZSAtLXNlY3VyaXR5IC15CiAgICAgICAgZmkKICAgIGVsc2UKICAgICAgICBl
Y2hvICJGQUxDT05DVEwgSVMgTk9UIEZPVU5EIE9SIFJVTk5JTkcuIFBFUkZPUk1JTkcgUkVHVUxB
UiBTWVNURU0gVVBEQVRFUy4iCiAgICAgICAgaWYgWyAiJHBhY2thZ2VfbWFuYWdlciIgPSAieXVt
IiBdOyB0aGVuCiAgICAgICAgICAgICRwYWNrYWdlX21hbmFnZXIgdXBkYXRlIC0tc2VjdXJpdHkg
LXkKICAgICAgICBlbGlmIFsgIiRwYWNrYWdlX21hbmFnZXIiID0gImFwdCIgXTsgdGhlbgogICAg
ICAgICAgICAkcGFja2FnZV9tYW5hZ2VyIHVwZGF0ZSAmJiAkcGFja2FnZV9tYW5hZ2VyIHVwZ3Jh
ZGUgLXkKICAgICAgICBmaQogICAgZmkKfQoKIyBIYWQgdG8gc3BsaXQgdGhlIGxvZ2ljIGZvciBj
cmVhdGluZyBzZWN1cml0eSB1cGRhdGUgQ1lBIGZpbGVzIGluIHRoZSBjaGFuZ2UgZGlyZWN0b3J5
LCBmcm9tIHRoZSBiZWZvcmUgYW5kIGFmdGVyIG1hcmtlcnMgdG8gcmVkdWNlIHJlZHVuZHVhbmN5
IGJ5IGhhdmluZyB0byBpbmNsdWRlIHRyaGUgbG9naWMgbW9yZSB0aGFuIG9uY2UuIAojIFNvIEkg
b3B0ZWQgdG8gY2FsbCBvbmNlIGluIHRoZSBwb3N0X3JlYm9vdF9vcGVyYXRpb25zCnBvc3Rfc2Vj
dXJpdHlfb3AoKSB7CiAgICBpZiBbWyAiJHBhY2thZ2VfbWFuYWdlciIgPT0gInl1bSIgXV07IHRo
ZW4KICAgICAgICBlY2hvICJSVU5OSU5HIE9QRVJBVElPTlMgRk9SIFJFRCBIQVQvQU1BWk9OL09S
QUNMRSBMSU5VWCIKICAgICAgICAkcGFja2FnZV9tYW5hZ2VyIHVwZGF0ZWluZm8gbGlzdCBzZWN1
cml0eSBpbnN0YWxsZWQgfCBncmVwIFJIU0EgPiAvcm9vdC8kQ0hBTkdFL3NlY3VyaXR5X2luc3Rh
bGxlZC5hZnRlcgogICAgZWxpZiBbWyAiJHBhY2thZ2VfbWFuYWdlciIgPT0gImFwdCIgXV07IHRo
ZW4KICAgICAgICBlY2hvICJSVU5OSU5HIE9QRVJBVElPTlMgRk9SIERFQklBTi9VQlVOVFUiCiAg
ICAgICAgbWFpbnRkYXRlPSQoZGF0ZSAiKyVZLSVtLSVkIikKICAgICAgICBncmVwICIgaW5zdGFs
bGVkICIgL3Zhci9sb2cvZHBrZy5sb2cgfCBncmVwICIkbWFpbnRkYXRlIiB8IGF3ayAne3ByaW50
ICQ0LCAkNX0nIHwgdW5pcSB8IHNvcnQgPiAvcm9vdC8kQ0hBTkdFL3NlY3VyaXR5X2luc3RhbGxl
ZC5hZnRlcgogICAgZWxzZQogICAgICAgIGVjaG8gIlVOU1VQUE9SVEVEIFBBQ0tBR0UgTUFOQUdF
UjogJHBhY2thZ2VfbWFuYWdlciIKICAgICAgICByZXR1cm4gMQogICAgZmkKfQoKIyBGb3IgYmVm
b3JlL2FmdGVyIGNvbXBhcmlzb25zLCBjYWxsZWQgaW4gdGhlIHByZV9yZWJvb3Rfb3BlcmF0aW9u
cygpIGZ1bmN0aW9uCmJlZm9yZV9tYXJrZXJzKCkgewogICAgc3MgLW50bHAgfCBhd2sgJ3twcmlu
dCAkNn0nIHwgYXdrIC1GICc6JyAne3ByaW50ICRORn0nIHwgc29ydCB8IHVuaXEgPiAvcm9vdC8k
Q0hBTkdFL25ldHN0YXRfcnVubmluZy5iZWZvcmUKICAgIHBzIC1lIC1vIHBwaWQscGlkLGNtZCB8
IGVncmVwICdeXHMrMVxzKycgPiAvcm9vdC8kQ0hBTkdFL3BzX3J1bm5pbmcuYmVmb3JlCiAgICBz
eXN0ZW1jdGwgbGlzdC11bml0cyAtLXR5cGU9c2VydmljZSA+IC9yb290LyRDSEFOR0Uvc3lzdGVt
Y3RsX3J1bm5pbmcuYmVmb3JlCiAgICBtb3VudCA+IC9yb290LyRDSEFOR0UvbW91bnQuYmVmb3Jl
CiAgICB1bmFtZSAtciA+IC9yb290LyRDSEFOR0Uva2VybmVsLmJlZm9yZQogICAgZWNobyAiKENy
b3dkc3RyaWtlIFJ1bm5pbmc/KTogJCgvb3B0L0Nyb3dkU3RyaWtlL2ZhbGNvbmN0bCAtZyAtLXJm
bS1zdGF0ZSAyPi9kZXYvbnVsbCB8fCBlY2hvICJDUk9XRFNUUklLRSBOT1QgRk9VTkQgUlVOTklO
RyBPTiBUSElTIFNZU1RFTSEhISIpIiA+IC9yb290LyRDSEFOR0UvY3Jvd2RzdHJpa2UuYmVmb3Jl
CiAgICBlY2hvICJIb3N0bmFtZTogJChob3N0bmFtZSkiICYmIGVjaG8gIklQIEFkZHJlc3M6ICQo
aG9zdG5hbWUgLUkpIiA+IC9yb290LyRDSEFOR0UvaG9zdG5hbWVfaW5mby5iZWZvcmUKICAgIGVj
aG8gIi9ldGMvaG9zdHMgY2hlY2tzdW06ICQobWQ1c3VtIC9ldGMvaG9zdHMgfCBjdXQgLWQgJyAn
IC1mMSkiID4gL3Jvb3QvJENIQU5HRS9ob3N0c19pbmZvLmJlZm9yZSAKICAgIGVjaG8gIi9ldGMv
cmVzb2x2LmNvbmYgY2hlY2tzdW06ICQobWQ1c3VtIC9ldGMvcmVzb2x2LmNvbmYgfCBjdXQgLWQg
JyAnIC1mMSkiID4gL3Jvb3QvJENIQU5HRS9yZXNvbHZfaW5mby5iZWZvcmUKfQoKIyBGb3IgYmVm
b3JlL2FmdGVyIGNvbXBhcmlzb25zLCBidXQgaGFzIGEgbGl0dGxlIG1vcmUgaW5mbyBmb3IgdGhl
IHJlcG9ydC4gSXMgY2FsbGVkIGluIHRoZSBwb3N0X3JlYm9vdF9vcGVyYXRpb25zKCkKYWZ0ZXJf
bWFya2VycygpIHsKICAgIHNzIC1udGxwIHwgYXdrICd7cHJpbnQgJDZ9JyB8IGF3ayAtRiAnOicg
J3twcmludCAkTkZ9JyB8IHNvcnQgfCB1bmlxID4gL3Jvb3QvJENIQU5HRS9uZXRzdGF0X3J1bm5p
bmcuYWZ0ZXIKICAgIHBzIC1lIC1vIHBwaWQscGlkLGNtZCB8IGVncmVwICdeXHMrMVxzKycgPiAv
cm9vdC8kQ0hBTkdFL3BzX3J1bm5pbmcuYWZ0ZXIKICAgIHN5c3RlbWN0bCBsaXN0LXVuaXRzIC0t
dHlwZT1zZXJ2aWNlID4gL3Jvb3QvJENIQU5HRS9zeXN0ZW1jdGxfcnVubmluZy5hZnRlcgogICAg
bW91bnQgPiAvcm9vdC8kQ0hBTkdFL21vdW50LmFmdGVyCiAgICB1bmFtZSAtciA+IC9yb290LyRD
SEFOR0Uva2VybmVsLmFmdGVyCiAgICBncmVwIC5zZXJ2aWNlIC9yb290LyRDSEFOR0Uvc3lzdGVt
Y3RsX3J1bm5pbmcuYmVmb3JlIHwgYXdrICd7cHJpbnQgJDEsJDIsJDMsJDR9JyB8IHNvcnQgPiAv
cm9vdC8kQ0hBTkdFL3N5c3RlbWN0bF9ydW5uaW5nLmJlZm9yZS4xCiAgICBncmVwIC5zZXJ2aWNl
IC9yb290LyRDSEFOR0Uvc3lzdGVtY3RsX3J1bm5pbmcuYWZ0ZXIgfCBhd2sgJ3twcmludCAkMSwk
MiwkMywkNH0nIHwgc29ydCA+IC9yb290LyRDSEFOR0Uvc3lzdGVtY3RsX3J1bm5pbmcuYWZ0ZXIu
MQogICAgZ3JlcCBeL2RldiAvcm9vdC8kQ0hBTkdFL21vdW50LmJlZm9yZSA+IC9yb290LyRDSEFO
R0UvbW91bnQuYmVmb3JlLjEKICAgIGdyZXAgXi9kZXYgL3Jvb3QvJENIQU5HRS9tb3VudC5hZnRl
ciA+IC9yb290LyRDSEFOR0UvbW91bnQuYWZ0ZXIuMQogICAgZWNobyAiKENyb3dkc3RyaWtlIFJ1
bm5pbmc/KTogJCgvb3B0L0Nyb3dkU3RyaWtlL2ZhbGNvbmN0bCAtZyAtLXJmbS1zdGF0ZSAyPi9k
ZXYvbnVsbCB8fCBlY2hvICJDUk9XRFNUUklLRSBOT1QgRk9VTkQgUlVOTklORyBPTiBUSElTIFNZ
U1RFTSEhISIpIiA+IC9yb290LyRDSEFOR0UvY3Jvd2RzdHJpa2UuYWZ0ZXIKICAgIGRpZmYgLVUw
IC9yb290LyRDSEFOR0Uvc3lzdGVtY3RsX3J1bm5pbmcuYmVmb3JlLjEgL3Jvb3QvJENIQU5HRS9z
eXN0ZW1jdGxfcnVubmluZy5hZnRlci4xCiAgICBkaWZmIC1VMCAvcm9vdC8kQ0hBTkdFL21vdW50
LmJlZm9yZS4xIC9yb290LyRDSEFOR0UvbW91bnQuYWZ0ZXIuMQogICAgZWNobyAiSG9zdG5hbWU6
ICQoaG9zdG5hbWUpIiAmJiBlY2hvICJJUCBBZGRyZXNzOiAkKGhvc3RuYW1lIC1JKSIgPiAvcm9v
dC8kQ0hBTkdFL2hvc3RuYW1lX2luZm8uYWZ0ZXIKICAgIGVjaG8gIi9ldGMvaG9zdHMgY2hlY2tz
dW06ICQobWQ1c3VtIC9ldGMvaG9zdHMgfCBjdXQgLWQgJyAnIC1mMSkiID4gL3Jvb3QvJENIQU5H
RS9ob3N0c19pbmZvLmFmdGVyCiAgICBlY2hvICIvZXRjL3Jlc29sdi5jb25mIGNoZWNrc3VtOiAk
KG1kNXN1bSAvZXRjL3Jlc29sdi5jb25mIHwgY3V0IC1kICcgJyAtZjEpIiA+IC9yb290LyRDSEFO
R0UvcmVzb2x2X2luZm8uYWZ0ZXIKfQoKIyBUbyBzZWUgY2hhbmdlcy91cGRhdGVzIHRvIHRoZSBp
bnN0YW5jZSBpbiBhIG5lYXQgbGl0dGxlIHJlcG9ydC4gQSBsb2cgZmlsZSBpcyBnZW5lcmF0ZWQg
aW4gdGhlIGNoYW5nZSBkaXJlY3RvcnkgYnR3LiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBpbiB0
aGUgcG9zdF9yZWJvb3Rfb3BlcmF0aW9ucygpCm1haW50ZW5hbmNlX3JlcG9ydCgpIHsKICAgIG1h
aW50ZGF0ZT0kKGRhdGUgIislZCAlYiAlWSIpCiAgICAKICAgIGlmIFsgLXogIiRDSEFOR0UiIF07
IHRoZW4KICAgICAgICBlY2hvICJDSEFOR0UgVkFSSUFCTEUgSVMgTk9UIFNFVCwgRVhJVElORy4i
CiAgICAgICAgcmV0dXJuIDEKICAgIGZpCgogICAgTE9HX0ZJTEU9Ii9yb290LyRDSEFOR0UvbWFp
bnRlbmFuY2Vsb2cudHh0IgoKIyBTZWUgdGhlIGJlbG93IGluIHRoZSBlY2hvIGJsb2NrLiBUaGlz
IGlzIHdoZXJlIHdlIGdldCB0aGUgYW1vdW50IG9mIHBhY2thZ2VzIGluc3RhbGxlZC4KY291bnRf
cGFja2FnZXNfaW5zdGFsbGVkX2xhc3RfdXBkYXRlKCkgewogICAgaWYgW1sgIiRwYWNrYWdlX21h
bmFnZXIiID09ICJ5dW0iIF1dOyB0aGVuCiAgICAgICAgcnBtIC1xYSAtLWxhc3QgMj4vZGV2L251
bGwgfCBncmVwICIkbWFpbnRkYXRlIiB8IHVuaXEgfCB3YyAtbAogICAgZWxpZiBbWyAiJHBhY2th
Z2VfbWFuYWdlciIgPT0gImFwdCIgXV07IHRoZW4KICAgICAgICBtYWludGRhdGU9JChkYXRlICIr
JVktJW0tJWQiKQogICAgICAgIGdyZXAgIiBpbnN0YWxsZWQgIiAvdmFyL2xvZy9kcGtnLmxvZyB8
IGdyZXAgIiRtYWludGRhdGUiIHwgYXdrICd7cHJpbnQgJDQsICQ1fScgfCB1bmlxIHwgd2MgLWwK
ICAgIGVsc2UKICAgICAgICBlY2hvICJVTlNVUFBPUlRFRCBQQUNLQUdFIE1BTkFHRVI6ICRwYWNr
YWdlX21hbmFnZXIiCiAgICBmaQp9CgojIFNlZSBqdXN0IGEgdGFkIGZ1dGhlciBiZWxvdyBpbiB0
aGUgZWNobyBibG9jay4gVGhpcyBpcyB3aGVyZSB3ZSBsaXN0IHRoZSBwYWNrYWdlcyBpbnN0YWxs
ZWQuIElmIHdlIGRvbid0IHdhbnQgdGhpcyBpbmZvLCBqdXN0IGNvbW1lbnQgb3V0IGxpbmVzIDIw
MiBhbmQgMjAzLiBJIGZlbHQgaXQgd2FzIGltcG9ydGFudCB0byBpbmNsdWRlIHN1Y2ggdmVyYm9z
ZSBpbmZvLCBhcyBhIENZQS4KcGFja2FnZXNfaW5zdGFsbGVkX2xhc3RfdXBkYXRlKCkgewogICAg
aWYgW1sgIiRwYWNrYWdlX21hbmFnZXIiID09ICJ5dW0iIF1dOyB0aGVuCiAgICAgICAgcnBtIC1x
YSAtLWxhc3QgMj4vZGV2L251bGwgfCBncmVwICIkbWFpbnRkYXRlIiB8IHNvcnQgfCB1bmlxCiAg
ICBlbGlmIFtbICIkcGFja2FnZV9tYW5hZ2VyIiA9PSAiYXB0IiBdXTsgdGhlbgogICAgICAgIG1h
aW50ZGF0ZT0kKGRhdGUgIislWS0lbS0lZCIpCiAgICAgICAgZ3JlcCAiIGluc3RhbGxlZCAiIC92
YXIvbG9nL2Rwa2cubG9nIHwgZ3JlcCAiJG1haW50ZGF0ZSIgfCBhd2sgJ3twcmludCAkNCwgJDV9
JyB8IHNvcnQgfCB1bmlxCiAgICBlbHNlCiAgICAgICAgZWNobyAiVU5TVVBQT1JURUQgUEFDS0FH
RSBNQU5BR0VSOiAkcGFja2FnZV9tYW5hZ2VyIgogICAgZmkKfQoKICAgIHsKICAgICAgICBlY2hv
ICI9PT09PSBNYWludGVuYW5jZSByZXBvcnQgZm9yICQoaG9zdG5hbWUgLXMpID09PT09IgogICAg
ICAgIGVjaG8gIihDdXJyZW50IGRhdGUpOiAkKGRhdGUpIgogICAgICAgIGVjaG8gIihTZXJ2ZXIg
cnVubmluZyBzaW5jZSk6ICQodXB0aW1lIC1zKSIKICAgICAgICAvb3B0L0Nyb3dkU3RyaWtlL2Zh
bGNvbmN0bCAtZyAtLXJmbS1zdGF0ZSAyPi9kZXYvbnVsbCB8IGdyZXAgLXEgJ3JmbS1zdGF0ZT1m
YWxzZScgJiYgZWNobyAiKElzIENyb3dkc3RyaWtlIHJ1bm5pbmcpOiBZZXMiIHx8IGVjaG8gIihJ
cyBDcm93ZHN0cmlrZSBydW5uaW5nKTogTm8iCiAgICAgICAgZWNobyAiKFBhY2thZ2VzIGluc3Rh
bGxlZCBkdXJpbmcgbWFpbnRlbmFuY2UpOiAkKGNvdW50X3BhY2thZ2VzX2luc3RhbGxlZF9sYXN0
X3VwZGF0ZSkiCiAgICAgICAgZWNobyAiKFByZXZpb3VzIHJ1bm5pbmcga2VybmVsIHZlcnNpb24p
OiAkKGNhdCAvcm9vdC8kQ0hBTkdFL2tlcm5lbC5iZWZvcmUpIgogICAgICAgIGVjaG8gIihDdXJy
ZW50IHJ1bm5pbmcga2VybmVsIHZlcnNpb24pOiAkKHVuYW1lIC1yKSIKICAgICAgICBlY2hvICIo
S2VybmVsIHBhY2thZ2VzIGluc3RhbGxlZCBkdXJpbmcgbWFpbnRlbmFuY2UpOgogICAgICAgICQo
cGFja2FnZXNfaW5zdGFsbGVkX2xhc3RfdXBkYXRlKSIKICAgICAgICBob3N0bmFtZV9jaGFuZ2Vk
PSQoZGlmZiA8KGdyZXAgJ0hvc3RuYW1lJyAvcm9vdC8kQ0hBTkdFL2hvc3RuYW1lX2luZm8uYmVm
b3JlKSA8KGdyZXAgJ0hvc3RuYW1lJyAvcm9vdC8kQ0hBTkdFL2hvc3RuYW1lX2luZm8uYWZ0ZXIp
ID4gL2Rldi9udWxsICYmIGVjaG8gIk5vIiB8fCBlY2hvICJZZXMiKQogICAgICAgIGhvc3RzX2No
YW5nZWQ9JChkaWZmIDwoZ3JlcCAnL2V0Yy9ob3N0cyBjaGVja3N1bScgL3Jvb3QvJENIQU5HRS9o
b3N0c19pbmZvLmJlZm9yZSkgPChncmVwICcvZXRjL2hvc3RzIGNoZWNrc3VtJyAvcm9vdC8kQ0hB
TkdFL2hvc3RzX2luZm8uYWZ0ZXIpID4gL2Rldi9udWxsICYmIGVjaG8gIk5vIiB8fCBlY2hvICJZ
ZXMiKQogICAgICAgIHJlc29sdl9jb25mX2NoYW5nZWQ9JChkaWZmIDwoZ3JlcCAnL2V0Yy9yZXNv
bHYuY29uZiBjaGVja3N1bScgL3Jvb3QvJENIQU5HRS9yZXNvbHZfaW5mby5iZWZvcmUpIDwoZ3Jl
cCAnL2V0Yy9yZXNvbHYuY29uZiBjaGVja3N1bScgL3Jvb3QvJENIQU5HRS9yZXNvbHZfaW5mby5h
ZnRlcikgPiAvZGV2L251bGwgJiYgZWNobyAiTm8iIHx8IGVjaG8gIlllcyIpCiAgICAgICAgZWNo
byAiKEhvc3RuYW1lIGNoYW5nZWQ/KTogJGhvc3RuYW1lX2NoYW5nZWQiCiAgICAgICAgZWNobyAi
KEhvc3RzIGZpbGUgY2hhbmdlZD8pOiAkaG9zdHNfY2hhbmdlZCIKICAgICAgICBlY2hvICIoUmVz
b2x2LmNvbmYgY2hhbmdlPyk6ICRyZXNvbHZfY29uZl9jaGFuZ2VkIgogICAgfSB8IHRlZSAtYSAi
JExPR19GSUxFIgp9CgojIEJpZyBkYXdnIGZ1bmN0aW9uLCBmb3IgdGhvc2UgdGltZXMgd2hlbiB5
b3UganVzdCB3YW50IHRoZSBpbnN0YW5jZSB0byBnaXZlIGEgcXVpY2sgZGlhZ25vc3RpYyByZXBv
cnQsIGluIHJlbGF0aW9uIHRvIHBhdGNoaW5nLgpRQygpIHsKICAgICAgICBpZiBbWyAkc2lsZW50
X21vZGUgLWVxIDEgXV07IHRoZW4KICAgICAgICBleGVjIDM+JjEgND4mMiAgIyBTYXZlIFNURE9V
VCAmIFNUREVSUgogICAgICAgIGV4ZWMgMT4vZGV2L251bGwgMj4mMSAgIyBSZWRpcmVjdCBTVERP
VVQgJiBTVERFUlIgdG8gL2Rldi9udWxsCiAgICBmaQoKICAgIGNsZWFyCmNvbG9ycz0oMzEgMzIg
MzMgMzQgMzUgMzYpCgphbmltYXRlX3RleHQoKSB7CiAgICBsb2NhbCB0ZXh0PSJRQyBTRVFVRU5D
RSBJTklUSUFURUQuLi4iCiAgICBsb2NhbCBkZWxheT0wLjIKICAgIGxvY2FsIGR1cmF0aW9uPTMK
ICAgIGxvY2FsIGVuZF90aW1lPSQoKFNFQ09ORFMgKyBkdXJhdGlvbikpCgogICAgZWNobyAtbmUg
IlxyXDAzM1tLIgoKICAgIHdoaWxlIFsgJFNFQ09ORFMgLWx0ICRlbmRfdGltZSBdOyBkbwogICAg
ICAgIGZvciBjb2xvciBpbiAiJHtjb2xvcnNbQF19IjsgZG8KICAgICAgICAgICAgaWYgWyAkU0VD
T05EUyAtZ2UgJGVuZF90aW1lIF07IHRoZW4KICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAg
ICAgIGZpCiAgICAgICAgICAgIGVjaG8gLW5lICJcMDMzWyR7Y29sb3J9bSR7dGV4dH1cMDMzWzBt
IgogICAgICAgICAgICBzbGVlcCAkZGVsYXkKICAgICAgICAgICAgZWNobyAtbmUgIlxyXDAzM1tL
IgogICAgICAgIGRvbmUKICAgIGRvbmUKfQoKYW5pbWF0ZV90ZXh0CgojIFRoaXMgaXMgYSBmYWls
c2FmZSwgaW4gdGhlIGV2ZW50IHRoZSAnLWMnIHN3aXRjaCBkb2Vzbid0IHNldCwgZm9yIHdoYXRl
dmVyIHJlYXNvbiwgdGhlIGNoYW5nZSBkaXJlY3RvcnkKWyAhIC1kICIvcm9vdC8kQ0hBTkdFIiBd
ICYmIG1rZGlyIC1wICIvcm9vdC8kQ0hBTkdFIgoKICAgIGlmIFtbIC1mIC9ldGMvb3MtcmVsZWFz
ZSBdXTsgdGhlbgogICAgICAgIC4gL2V0Yy9vcy1yZWxlYXNlCiAgICAgICAgY2FzZSAkSUQgaW4K
ICAgICAgICAgICAgdWJ1bnR1fGRlYmlhbikKICAgICAgICAgICAgICAgIHBhY2thZ2VfbWFuYWdl
cj0iYXB0IgogICAgICAgICAgICAgICAgOzsKICAgICAgICAgICAgcmhlbHxhbXpufG9sKSAjIEFk
ZGVkICdvbCcgZm9yIE9yYWNsZSBMaW51eAogICAgICAgICAgICAgICAgcGFja2FnZV9tYW5hZ2Vy
PSJ5dW0iCiAgICAgICAgICAgICAgICA7OwogICAgICAgICAgICAqKQogICAgICAgICAgICAgICAg
ZWNobyAiRElTVFJJQlVUSU9OICRJRCBOT1QgU1VQUE9SVEVEIEJZIFRISVMgU0NSSVBULiIKICAg
ICAgICAgICAgICAgIHRlc3RfcmVwb3NfcmVzdWx0PSJGQUlMRUQiCiAgICAgICAgICAgICAgICBy
ZXR1cm4gMQogICAgICAgICAgICAgICAgOzsKICAgICAgICBlc2FjCiAgICBlbHNlCiAgICAgICAg
ZWNobyAiVU5BQkxFIFRPIERFVEVSTUlORSBESVNUUklCVVRJT04uIgogICAgICAgIHRlc3RfcmVw
b3NfcmVzdWx0PSJGQUlMRUQiCiAgICAgICAgcmV0dXJuIDEKICAgIGZpCgojIFRoZSBwYXRjaGVt
ZSBzZWN0aW9uLiBJIGRlY2lkZWQgdG8gbGVhdmUgaW4tbGluZSBmb3Igbm93LCBidXQgd2lsbCBw
cm9iYWJseSBtb2R1bGFyaXplIGludG8gYSBmdW5jdGlvbiB3aGljaCBpcyBvbmx5IGNhbGxlZCB3
aXRoIHRoZSBzd2l0Y2guCiMgU3BlYWtpbmcgb2Ygd2hpY2gsIGlmIGEgdXNlciBzcGVjaWZpZXMg
YSAnLWsnIGZsYWcgd2l0aCBhIGtlcm5lbCwgd2UnbGwgZ2VuZXJhdGUgdGhlIHBhdGNobWUgZmls
ZXMgZm9yIFF1YWx5cwppZiBbWyAhIC16ICIkS2VybmVsIiBdXTsgdGhlbiAgCiAgICBlY2hvICJL
RVJORUwgVkVSU0lPTiBTUEVDSUZJRUQ6ICRLZXJuZWwuIEdFTkVSQVRJTkcgcGF0Y2htZS5zaC4u
LiIKCiAgICBpZiBbWyAiJElEIiA9PSAicmhlbCIgfHwgIiRJRCIgPT0gImFtem4iIHx8ICIkSUQi
ID09ICJvbCIgXV07IHRoZW4KICAgICAgICBjYXQgPDxFT0YgPiAvcm9vdC8kQ0hBTkdFL3BhdGNo
bWUuc2gKIyEvYmluL2Jhc2gKbmV3a2VybmVsPSIkS2VybmVsIgokcGFja2FnZV9tYW5hZ2VyIGlu
c3RhbGwga2VybmVsLSRLZXJuZWwgLXkKIyByZWJvb3QKRU9GCiAgICBlbGlmIFtbICIkSUQiID09
ICJ1YnVudHUiIHx8ICIkSUQiID09ICJkZWJpYW4iIF1dOyB0aGVuCiAgICAgICAgY2F0IDw8RU9G
ID4gL3Jvb3QvJENIQU5HRS9wYXRjaG1lLnNoCiMhL2Jpbi9iYXNoCm5ld2tlcm5lbD0iJEtlcm5l
bCIKYXB0LWdldCB1cGRhdGUKYXB0LWdldCBpbnN0YWxsICRLZXJuZWwgLXkKIyByZWJvb3QKRU9G
CiAgICBlbHNlCiAgICAgICAgZWNobyAiRElTVFJJQlVUSU9OIE5PVCBTVVBQT1JURUQgRk9SIEtF
Uk5FTCBQQVRDSElORyIKICAgICAgICByZXR1cm4gMQogICAgZmkKCiAgICBjaG1vZCAreCAvcm9v
dC8kQ0hBTkdFL3BhdGNobWUuc2gKICAgIGVjaG8gLWUgIlwwMzNbMzJtcGF0Y2htZS5zaCBTQ1JJ
UFQgU1VDQ0VTU0ZVTExZIEdFTkVSQVRFRC5cMDMzWzBtIgoKICAgICMgUmVtb3ZlIHRoZSByZXR1
cm4gc3RhdGVtZW50IGhlcmUgc28gdGhhdCB0aGUgc2NyaXB0IGNvbnRpbnVlcyB0byBydW4gdGhl
IFFDIGFmdGVyIGdlbmVyYXRpbmcgcGF0Y2htZS5zaC4KZmkKCiAgICBleHBvcnQgUFlUSE9OV0FS
TklOR1M9Imlnbm9yZSIKICAgIGxvY2FsIHRlc3RfcmVwb3NfcmVzdWx0PSJQQVNTRUQiCiAgICBs
b2NhbCBkaXNrX3NwYWNlX2NoZWNrX3Jlc3VsdD0iUEFTU0VEIgoKCiMgSSBoYWQgdG8gYWRkIGRp
c3RybyBpZGVudGlmaWNhdGlvbiB3aXRoaW4gdGhlIFFDIGZ1bmN0aW9uIGFzIFFDIGlzIGNhbGxl
ZCBvbiBpdHMgb3duLiB0aGUgZGlzdHJvX2JhbGwoKSBmdW5jdGlvbiBzaW4ndCBpbnZva2VkIHdp
dGggUUMuCiMgVGhpcyB3YXMgZG9uZSB0byBlbnN1cmUgdGhlIGluZGVwZW5kZW5jZSBvZiB0aGUg
UUMgZnVuY3Rpb24KY2hlY2tfa2VybmVsX3VwZGF0ZXMoKSB7CiAgICBpZiBbIC1mIC9ldGMvb3Mt
cmVsZWFzZSBdOyB0aGVuCiAgICAgICAgLiAvZXRjL29zLXJlbGVhc2UKICAgIGVsc2UKICAgICAg
ICBlY2hvICJVTkFCTEUgVE8gSURFTlRJRlkgVEhFIERJU1RSSUJVVElPTiBJTiBVU0UiCiAgICAg
ICAgcmV0dXJuIDEKICAgIGZpCgogICAgY2FzZSAkSUQgaW4KICAgICAgICB1YnVudHV8ZGViaWFu
KQogICAgICAgICAgICBhcHQtZ2V0IHVwZGF0ZSA+IC9kZXYvbnVsbCAyPiYxCiAgICAgICAgICAg
IHVwZGF0ZXM9JChhcHQgbGlzdCAtLXVwZ3JhZGFibGUgMj4mMSB8IGdyZXAgJ2xpbnV4LWltYWdl
JykgCiAgICAgICAgICAgIFtbIC16ICIkdXBkYXRlcyIgXV0gJiYgZWNobyAiTk8gS0VSTkVMIFVQ
REFURVMgQVZBSUxBQkxFIiB8fCBlY2hvICIkdXBkYXRlcyIKICAgICAgICAgICAgOzsKICAgICAg
ICByaGVsfGFtem58b2wpCiAgICAgICAgICAgIHl1bSBsaXN0IGtlcm5lbCAtLXNob3dkdXBsaWNh
dGVzIHwgdGFpbCAtNQogICAgICAgICAgICA7OwogICAgICAgICopCiAgICAgICAgICAgIGVjaG8g
IkRJU1RSSUJVVElPTiAkSUQgTk9UIFNVUFBPUlRFRCBCWSBUSElTIFNDUklQVC4iCiAgICAgICAg
ICAgIHJldHVybiAxCiAgICAgICAgICAgIDs7CiAgICBlc2FjCn0KCmNsZWFyCiAgICBlY2hvCiAg
ICBlY2hvICItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIKICAgIGVjaG8gIlRFU1RJ
TkcgUkVQT1NJVE9SWSBGVU5DVElPTkFMSVRZIgogICAgZWNobyAiLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0iCiAgICBlY2hvCgogICAgaWYgW1sgIiRwYWNrYWdlX21hbmFnZXIiID09
ICJ5dW0iIF1dOyB0aGVuCiAgICAgICAgaWYgW1sgIiRWRVJTSU9OX0lEIiA9PSA3KiB8fCAiJElE
IiA9PSAiYW16biIgJiYgKCAiJFZFUlNJT05fSUQiID09ICIyIiB8fCAiJFZFUlNJT05fSUQiID09
IDIwMTgqICkgXV07IHRoZW4KICAgICAgICAgICAgY2xlYW5fY21kPSJ5dW0gbWFrZWNhY2hlIGZh
c3QiCiAgICAgICAgZWxzZQogICAgICAgICAgICBjbGVhbl9jbWQ9Inl1bSBtYWtlY2FjaGUgLS10
aW1lciIKICAgICAgICBmaQogICAgZWxzZQogICAgICAgIGNsZWFuX2NtZD0iYXB0LWdldCBjaGVj
ayAmJiBhcHQtZ2V0IGF1dG9jbGVhbiIKICAgIGZpCgplY2hvICJFeGVjdXRpbmc6ICRjbGVhbl9j
bWQiCmlmICEgJGNsZWFuX2NtZDsgdGhlbgogICAgZWNobyAtZSAiXDAzM1szMW1RQyBGQUlMRUQ6
IElTU1VFIE1BS0lORyBDQUNIRS4gUE9TU0lCTFkgRFVFIFRPIFBFUk1JU1NJT04gSVNTVUVTLCBD
T1JSVVBURUQgQ0FDSEUgRklMRVMsIE9SIFBBQ0tBR0UgTUFOQUdFUiBDT05GSUdVUkFUSU9OIEVS
Uk9SU1wwMzNbMG0iCiAgICB0ZXN0X3JlcG9zX3Jlc3VsdD0iRkFJTEVEIgplbHNlCiAgICBlY2hv
IC1lICJcMDMzWzMybVFDIFJFUE9TSVRPUlkgRlVOQ1RJT05BTElUWSBURVNUIFBBU1NFRC5cMDMz
WzBtIgpmaQoKaWYgWyAiJHRlc3RfcmVwb3NfcmVzdWx0IiA9ICJGQUlMRUQiIF07IHRoZW4KICAg
IHJldHVybiAxCmZpCgogICAgZWNobyAiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIgog
ICAgZWNobyAiQ0xFQVJJTkcgUEFDS0FHRSBNQU5BR0VSIENBQ0hFIgogICAgZWNobyAiLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIgogICAgZWNobyAiRXhlY3V0aW5nOiAke3BhY2thZ2Vf
bWFuYWdlcn0gY2xlYW4gYWxsIgogICAgaWYgISBiYXNoIC1jICIke3BhY2thZ2VfbWFuYWdlcn0g
Y2xlYW4gYWxsIjsgdGhlbgogICAgICAgIGVjaG8gLWUgIlwwMzNbMzFtUUMgRkFJTEVEOiBJU1NV
RVMgQ0xFQU5JTkcgQ0FDSEUuXDAzM1swbSIKICAgICAgICB0ZXN0X3JlcG9zX3Jlc3VsdD0iRkFJ
TEVEIgogICAgICAgIHJldHVybiAxCiAgICBmaQoKICAgIGVjaG8gIi0tLS0tLS0tLS0tLS0tLS0t
LS0iCiAgICBlY2hvICJDSEVDS0lORyBESVNLIFNQQUNFIgogICAgZWNobyAiLS0tLS0tLS0tLS0t
LS0tLS0tLSIKICAgIGxvY2FsIHZhcl9zcGFjZT0kKGRmIC1CRyAvdmFyIHwgdGFpbCAtMSB8IGF3
ayAne3ByaW50ICQ0fScgfCBzZWQgJ3MvRy8vJykKICAgIGlmIFtbICIkdmFyX3NwYWNlIiAtbHQg
MyBdXTsgdGhlbgogICAgICAgIGVjaG8gIlFDIERJU0sgU1BBQ0UgQ0hFQ0sgRkFJTEVEOiBMRVNT
IFRIQU4gM0dCIEFWQUlMQUJMRSBJTiAvdmFyIgogICAgICAgIHRlc3RfcmVwb3NfcmVzdWx0PSJG
QUlMRUQiCiAgICAgICAgZWNobyAiUExFQVNFIFJFVklFVyBESVNLIFNQQUNFIgogICAgICAgIGRm
IC1CRyAvdmFyCiAgICAgICAgc2xlZXAgMgogICAgICAgIHJldHVybiAxCiAgICBlbHNlCiAgICAg
ICAgZWNobyAiU1VGRklDSUVOVCBESVNLIFNQQUNFIElOIC92YXIuIFBST0NFRURJTkcgV0lUSCBU
SEUgU0NSSVBULiIKICAgICAgICBkZiAtQkcgL3ZhcgogICAgICAgIHNsZWVwIDIKICAgIGZpCgog
ICAgZWNobyAtZSAiXDAzM1szMm1RQyBQQVNTRUQgRk9SIERJU0sgU1BBQ0VcMDMzWzBtIgoKICAg
IGVjaG8gIi0tLS0tLS0tLS0tLS0tLS0tLS0tIgogICAgZWNobyAiR0VORVJBVElORyBRQyBSRVBP
UlQiCiAgICBlY2hvICItLS0tLS0tLS0tLS0tLS0tLS0tLSIKICAgIHNsZWVwIDUKCmlmIFtbICRz
aWxlbnRfbW9kZSAtZXEgMSBdXTsgdGhlbgogICAgICAgIGV4ZWMgMT4mMyAyPiY0ICAjIFJlc3Rv
cmUgc3RhbmRhcmQgb3V0cHV0IGFuZCBzdGFuZGFyZCBlcnJvcgogICAgZmkKCiAgICB7CiAgICAg
ICAgZWNobyAtZSAiXDAzM1szM209PT09PSBRQyByZXBvcnQgZm9yICQoaG9zdG5hbWUgLXMpID09
PT09XDAzM1swbSIKICAgICAgICBlY2hvICIoQ3VycmVudCBkYXRlKTogJChkYXRlKSIKICAgICAg
ICBlY2hvICIoU2VydmVyIHJ1bm5pbmcgc2luY2UpOiAkKHVwdGltZSkiCiAgICAgICAgZWNobyAi
KEN1cnJlbnQgcnVubmluZyBrZXJuZWwgdmVyc2lvbik6ICQodW5hbWUgLXIpIgogICAgICAgIC9v
cHQvQ3Jvd2RTdHJpa2UvZmFsY29uY3RsIC1nIC0tcmZtLXN0YXRlIDI+L2Rldi9udWxsIHwgZ3Jl
cCAtcSAncmZtLXN0YXRlPWZhbHNlJyAmJiBlY2hvICIoSXMgQ3Jvd2RzdHJpa2UgcnVubmluZyk6
IFllcyIgfHwgZWNobyAiKElzIENyb3dkc3RyaWtlIHJ1bm5pbmcpOiBObyIKICAgICAgICBlY2hv
ICIoQ3VycmVudCBDcm93ZHN0cmlrZSBWZXJzaW9uKTogJCgvb3B0L0Nyb3dkU3RyaWtlL2ZhbGNv
bmN0bCAtZyAtLXZlcnNpb24gMj4vZGV2L251bGwpIgogICAgICAgIGVjaG8gIihBdmFpbGFibGUg
S2VybmVsIFVwZGF0ZXMpOiIKICAgICAgICBlY2hvICIkKGNoZWNrX2tlcm5lbF91cGRhdGVzKSIK
ICAgICAgICBlY2hvICIoVGVzdCBSZXBvc2l0b3JpZXMgUmVzdWx0KTogJHRlc3RfcmVwb3NfcmVz
dWx0IgogICAgICAgIGVjaG8gIihEaXNrIFNwYWNlIENoZWNrIFJlc3VsdCk6ICRkaXNrX3NwYWNl
X2NoZWNrX3Jlc3VsdCIKICAgICAgICBlY2hvIC1lICJcMDMzWzMzbT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT1cMDMzWzBtIgogICAgfSB8IHRlZSAiL3Jvb3QvJENIQU5H
RS9xY19yZXBvcnQudHh0Igp9CgojIFdoZW4geW91IHBhdGNoIGFuIGluc3RhbmNlLCB0aGlzIGlz
IHdoZXJlIHRoZSBkaXJlY3Rpb25hbCBmbG93IGhhcHBlbnMuIFRoZSBiZWdpbm5pbmcgb2YuLi50
aGUgam9iLgpwcmVfcmVib290X29wZXJhdGlvbnMoKSB7CiAgICBmb3VuZF9tYXJrZXI9JChmaW5k
IC9yb290LyRDSEFOR0UgLW5hbWUgInNjcmlwdF9yZWJvb3RfbWFya2VyIiAtcHJpbnQgLXF1aXQp
CgogICAgaWYgWyAteiAiJGZvdW5kX21hcmtlciIgXTsgdGhlbgogICAgICAgIGVjaG8gIlBFUkZP
Uk1JTkcgUFJFLVJFQk9PVCBPUEVSQVRJT05TLi4uIgogICAgICAgIAogICAgICAgIHRlbXBfZmls
ZT0iL3Jvb3QvJENIQU5HRS9zY3JpcHRfcmVib290X21hcmtlciIKICAgICAgICAKICAgICAgICB0
b3VjaCAkdGVtcF9maWxlCiAgICAgICAgZWNobyAiJENIQU5HRSIgPiAiJHRlbXBfZmlsZSIKCiAg
ICAgICAgaWYgWyAtbiAiJENIQU5HRSIgXTsgdGhlbgogICAgICAgICAgICBlY2hvICIkQ0hBTkdF
IiA+ICR0ZW1wX2ZpbGUKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gIkNIQU5HRSBWQVJJ
QUJMRSBJUyBOT1QgU0VUIgogICAgICAgIGZpCgogICAgICAgIFsgLWQgIi9yb290LyRDSEFOR0Ui
IF0gfHwgbWtkaXIgLXAgIi9yb290LyRDSEFOR0UiCgogICAgICAgICMgUUMsIENvbW1lbnRlZCBv
dXQgYXMgbm90IG5lY2Vzc2FyeSB0byBydW4gd2hlbiBwYXRjaGluZywgc2hvdWxkIGJlIHRyZWF0
ZWQgc2VwYXJhdGVseS4uLmJ1dCBqdXN0IGluIGNhc2UKICAgICAgICAvb3B0L0Nyb3dkU3RyaWtl
L2ZhbGNvbmN0bCAtZyAtLXJmbS1zdGF0ZSAyPi9kZXYvbnVsbCB8IGdyZXAgLXEgJ3JmbS1zdGF0
ZT1mYWxzZScgJiYgZWNobyAiSXMgQ3Jvd2RzdHJpa2UgcnVubmluZzogWWVzIiB8fCBlY2hvICJJ
cyBDcm93ZHN0cmlrZSBydW5uaW5nOiBObyIKICAgICAgICBlY2hvICJDcm93ZHN0cmlrZTogJCgv
b3B0L0Nyb3dkU3RyaWtlL2ZhbGNvbmN0bCAtZyAtLXZlcnNpb24gMj4vZGV2L251bGwpIgogICAg
ICAgIGVjaG8gIkZhbGNvbiBLZXJuZWwgQ2hlY2s6ICQoL29wdC9Dcm93ZFN0cmlrZS9mYWxjb24t
a2VybmVsLWNoZWNrIDI+L2Rldi9udWxsKSIKICAgICAgICBkaXN0cm9fYmFsbAogICAgICAgIGJl
Zm9yZV9tYXJrZXJzCiAgICAgICAgbW9kZXJuaXplCgogICAgICAgIGlmIFtbICIkcmVib290X2Zs
YWciIC1lcSAxIF1dOyB0aGVuCiAgICAgICAgICAgIGVjaG8KICAgICAgICAgICAgZWNobyAtZSAi
XDAzM1szMm1SRUJPT1RJTkcgTk9XLi4uXDAzM1swbSIKICAgICAgICAgICAgZWNobwogICAgICAg
ICAgICByZWJvb3QKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8KICAgICAgICAgICAgZWNo
byAtZSAiXDAzM1szMW1SRUJPT1QgTk9UIFJFUVVFU1RFRC4gQ09NUExFVElORyBPUEVSQVRJT05T
IFdJVEhPVVQgQSBSRUJPT1QuXDAzM1swbSIKICAgICAgICAgICAgZWNobwogICAgICAgIGZpCiAg
ICBlbHNlCiAgICAgICAgcG9zdF9yZWJvb3Rfb3BlcmF0aW9ucwogICAgZmkKfQoKcG9zdF9yZWJv
b3Rfb3BlcmF0aW9ucygpIHsKICAgIGNsZWFyCmZvdW5kX21hcmtlcj0kKGZpbmQgL3Jvb3QvJENI
QU5HRSAtbmFtZSAic2NyaXB0X3JlYm9vdF9tYXJrZXIiIC1wcmludCAtcXVpdCkKY29sb3JzPSgz
MSAzMiAzMyAzNCAzNSAzNikKCmFuaW1hdGVfdGV4dCgpIHsKICAgIGxvY2FsIHRleHQ9IlBPU1Qg
UkVCT09UIE9QRVJBVElPTlMgU0VRVUVOQ0UgSU5JVElBVEVELi4uIgogICAgbG9jYWwgZGVsYXk9
MC4yIAogICAgbG9jYWwgZHVyYXRpb249MwogICAgbG9jYWwgZW5kX3RpbWU9JCgoU0VDT05EUyAr
IGR1cmF0aW9uKSkgCgogICAgZWNobyAtbmUgIlxyXDAzM1tLIgoKICAgIHdoaWxlIFsgJFNFQ09O
RFMgLWx0ICRlbmRfdGltZSBdOyBkbwogICAgICAgIGZvciBjb2xvciBpbiAiJHtjb2xvcnNbQF19
IjsgZG8KICAgICAgICAgICAgaWYgWyAkU0VDT05EUyAtZ2UgJGVuZF90aW1lIF07IHRoZW4KICAg
ICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGZpCiAgICAgICAgICAgIGVjaG8gLW5lICJc
MDMzWyR7Y29sb3J9bSR7dGV4dH1cMDMzWzBtIgogICAgICAgICAgICBzbGVlcCAkZGVsYXkKICAg
ICAgICAgICAgZWNobyAtbmUgIlxyXDAzM1tLIgogICAgICAgIGRvbmUKICAgIGRvbmUKfQoKICAg
IGFuaW1hdGVfdGV4dAogICAgZGlzdHJvX2JhbGwKICAgIGFmdGVyX21hcmtlcnMKICAgIHBvc3Rf
c2VjdXJpdHlfb3AKICAgIG1haW50ZW5hbmNlX3JlcG9ydAogICAgcm0gLWYgIiRmb3VuZF9tYXJr
ZXIiCn0KCmF1dG9fbW9kZSAoKSB7CgppZiBbIC16ICIkQ0hBTkdFIiBdOyB0aGVuCiAgICBlY2hv
ICJFcnJvcjogQ0hBTkdFIHZhcmlhYmxlIG5vdCBzZXQuIFVzZSB0aGUgLWMgZmxhZyB0byBzZXQg
aXQuIgogICAgZXhpdCAxCmZpCgpjbGVhcgpjb2xvcnM9KDMxIDMyIDMzIDM0IDM1IDM2KQoKYW5p
bWF0ZV90ZXh0KCkgewogICAgbG9jYWwgdGV4dD0iQVVUT01BVEVEIFBBVENIIFNFUVVFTkNFIElO
SVRJQVRFRC4uLiIKICAgIGxvY2FsIGRlbGF5PTAuMiAKICAgIGxvY2FsIGR1cmF0aW9uPTMKICAg
IGxvY2FsIGVuZF90aW1lPSQoKFNFQ09ORFMgKyBkdXJhdGlvbikpIAoKICAgIGVjaG8gLW5lICJc
clwwMzNbSyIKCiAgICB3aGlsZSBbICRTRUNPTkRTIC1sdCAkZW5kX3RpbWUgXTsgZG8KICAgICAg
ICBmb3IgY29sb3IgaW4gIiR7Y29sb3JzW0BdfSI7IGRvCiAgICAgICAgICAgIGlmIFsgJFNFQ09O
RFMgLWdlICRlbmRfdGltZSBdOyB0aGVuCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAg
ICBmaQogICAgICAgICAgICBlY2hvIC1uZSAiXDAzM1ske2NvbG9yfW0ke3RleHR9XDAzM1swbSIK
ICAgICAgICAgICAgc2xlZXAgJGRlbGF5CiAgICAgICAgICAgIGVjaG8gLW5lICJcclwwMzNbSyIK
ICAgICAgICBkb25lCiAgICBkb25lCn0KCiAgICBhbmltYXRlX3RleHQKICAgIHByZV9yZWJvb3Rf
b3BlcmF0aW9ucwp9CgpyZWJvb3RfZmxhZz0wIAoKIyBOb3RlISBUaGUgcmVib290IHN3aXRjaCBt
dXN0IGJlIGJlZm9yZSBhbnkgb3RoZXIgZmxhZwp3aGlsZSBnZXRvcHRzICJjOnFhcGhyazpzIiBv
cHQ7IGRvCiAgICBjYXNlICRvcHQgaW4KICAgICAgICByKSByZWJvb3RfZmxhZz0xCiAgICAgICAg
ICAgOzsKICAgICAgICBjKSBDSEFOR0U9IiRPUFRBUkciCiAgICAgICAgICAgbWtkaXIgLXAgL3Jv
b3QvIiRDSEFOR0UiCiAgICAgICAgICAgOzsKICAgICAgICBrKSBLZXJuZWw9IiRPUFRBUkciCiAg
ICAgICAgICAgOzsKICAgICAgICBxKSBydW5fcWM9MSAgIyBTZXQgYSBmbGFnIHRvIHJ1biBRQyBh
ZnRlciBrZXJuZWwgaW5zdGFsbAogICAgICAgICAgIDs7CiAgICAgICAgYSkgYXV0b19tb2RlCiAg
ICAgICAgICAgZXhpdCAwCiAgICAgICAgICAgOzsKICAgICAgICBwKSBpZiBbIC1mICIvcm9vdC8k
Q0hBTkdFL3NjcmlwdF9yZWJvb3RfbWFya2VyIiBdOyB0aGVuCiAgICAgICAgICAgICAgIHBvc3Rf
cmVib290X29wZXJhdGlvbnMKICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgIGVjaG8gIk5v
IHJlYm9vdCBtYXJrZXIgZm91bmQuIEV4aXRpbmcuIgogICAgICAgICAgIGZpCiAgICAgICAgICAg
ZXhpdCAwCiAgICAgICAgICAgOzsKICAgICAgICBzKSBzaWxlbnRfbW9kZT0xCiAgICAgICAgICAg
OzsKICAgICAgICBoKSBlY2hvICJVc2FnZTogJDAgWy1yIFJlYm9vdC4gTXVzdCBzcGVjaWZ5IGJl
Zm9yZSAtYSBhbmQgLWsgc3dpdGNoIF0gWy1jIENoYW5nZSBUaWNrZXRdIFstcSBRQyBPbmx5XSBb
LWEgQXV0b21hdGljIE1vZGUuIFRvIHJ1biBzZWN1cml0eSBwYXRjaGluZ10gWy1wIFBvc3QgUmVi
b290IE9wZXJhdGlvbnNdIFstaCBIZWxwXSBbLXYgVmVyc2lvbl0gWy1rIEtlcm5lbCBWZXJzaW9u
XSBbLXMgU2lsZW50IE1vZGVdIgogICAgICAgICAgIGV4aXQgMAogICAgICAgICAgIDs7CiAgICAg
ICAgKikgZWNobyAiSW52YWxpZCBvcHRpb246IC0kT1BUQVJHIiA+JjIKICAgICAgICAgICBleGl0
IDEKICAgICAgICAgICA7OwogICAgZXNhYwpkb25lCgppZiBbIC16ICIkQ0hBTkdFIiBdOyB0aGVu
CiAgICBlY2hvICJFcnJvcjogQ0hBTkdFIHZhcmlhYmxlIG5vdCBzZXQuIFVzZSB0aGUgLWMgZmxh
ZyB0byBzZXQgaXQuIgogICAgZXhpdCAxCmZpCgpRQwoK"

# I incorporated my getids.sh OG script here, which will convert tag names to instance IDs. It's annooying to do so otherwise.
convert_tags_to_ids() {
    local region="$1"
    local file_path="$2"

    if [ ! -f "$file_path" ]; then
        echo "File not found: $file_path"
        exit 1
    fi

    # Working the user's input file & storing the output in a variable
    local tagNames
    tagNames=$(tr ',' '\n' < "$file_path")

    # Initialize an array to store instance IDs
    local instance_ids=()

    # Looping through each tag name provided by the user
    for tagName in $tagNames; do
        instanceIds=$(aws ec2 describe-instances --region "$region" --filters "Name=tag:Name,Values=$tagName" --query 'Reservations[*].Instances[*].[InstanceId]' --output text)

        if [ -z "$instanceIds" ]; then
            echo "No instances found with tag name: $tagName in region $region"
        else
            for id in $instanceIds; do
                instance_ids+=("$id")
            done
        fi
    done

    # Here, we're writing the instance IDs to a temp scratch file
    instance_ids_file=$(mktemp)
    printf "%s\n" "${instance_ids[@]}" > "$instance_ids_file"
    echo "$instance_ids_file"
}

# Added this instance state checker to fail out and continue past those instances
check_instance_state() {
    local instance_id=$1
    local region=$2

    instance_state=$(aws ec2 describe-instances --instance-ids "$instance_id" --region "$region" --query "Reservations[*].Instances[*].State.Name" --output text)

    if [[ "$instance_state" == "running" ]]; then
        return 0
    else
        echo "Instance $instance_id is not in a valid state (Current state: $instance_state). Skipping..."
        return 1
    fi
}

# ENHANCEMENT #2 which removed DNF,cleaned up duplicate date info...testing to see how this will impat being sent to ssm, works but could be better
get_recent_updates_logs() {
    local distro_type=$1

    local end_date=$(date +"%Y-%m-%d")
    local start_date=$(date -d "-14 days" +"%Y-%m-%d")

    if [[ "$distro_type" -eq 1 ]]; then
        # RHEL and similar distributions
        echo "sudo yum history list | grep 'update' | awk -v date=\"$start_date\" '\$5 >= date {print \$0}'"
    else
        # Ubuntu/Debian distributions
       echo "sudo awk '\$0 >= \"$start_date\" && \$0 <= \"$end_date\"' /var/log/apt/history.log"
   fi
}

# Unpacking Linux Patcher, then running in quiet mode to grab the output for the user to paste in their change notes. I've added a log feature for when this is run, see below.
run_linux_patcher() {
    local instance_id=$1
    local region=$2
    local change_number=$3
    local kernel_flag=$4  # This will store the '-k' flag and the kernel version if provided

    # Path to the Linux Patcher script on the instance
    local script_path="/root/Linux_Patcher_v2.6.sh"

    # Checking if the Linux Patcher script exists (exact version), if not, decode and create it
    local decode_command="[[ ! -f $script_path ]] && echo \"$LINUX_PATCHER_B64\" | base64 -d > $script_path && chmod +x $script_path"
    
    # Include the kernel flag if provided
    local patcher_command="sudo bash $script_path -c $change_number $kernel_flag -s > /tmp/linux_patcher_output.log 2>&1"
    
    local combined_command="$decode_command && $patcher_command"

    # Escape the combined commands for JSON formatting
    local escaped_command=$(printf "%s" "$combined_command" | sed 's/"/\\"/g')

    # Check if instance_id is empty and skip if so
    if [[ -z "$instance_id" ]]; then
        echo "Empty instance ID. Skipping..."
        return
    fi

    # Sending the command(s) using AWS SSM
    command_id=$(aws ssm send-command \
        --instance-ids "$instance_id" \
        --document-name "AWS-RunShellScript" \
        --timeout-seconds 600 \
        --parameters commands="[\"$escaped_command\"]" \
        --query 'Command.CommandId' \
        --output text --region "$region")

    if [[ -z "$command_id" ]]; then
        echo "Failed to send patching command to instance $instance_id. Skipping..."
        return 1
    fi

    # Fetch the QC report after patching
    sleep 10
    # local qc_report_command="cat /root/$change_number/qc_report.txt"
    local qc_report_command="cat /tmp/linux_patcher_output.log"
    local escaped_qc_command=$(printf '%s' "$qc_report_command" | sed 's/"/\\"/g')

    echo "Attempting to fetch QC report from instance $instance_id..."

    command_id=$(aws ssm send-command \
        --instance-ids "$instance_id" \
        --document-name "AWS-RunShellScript" \
        --timeout-seconds 600 \
        --parameters commands="[\"$escaped_qc_command\"]" \
        --query 'Command.CommandId' \
        --output text --region "$region")

    if [[ -z "$command_id" ]]; then
        echo "Failed to send QC report fetch command to instance $instance_id. Skipping..."
        return 1
    fi

    for attempt in {1..5}; do
        qc_output=$(aws ssm get-command-invocation \
            --command-id "$command_id" \
            --instance-id "$instance_id" \
            --region "$region" \
            --query 'StandardOutputContent' \
            --output text 2>/dev/null)

        if [[ -n "$qc_output" && "$qc_output" != "None" ]]; then
            echo "QC Report for Instance $instance_id:"
            echo "$qc_output"
            break
        else
            echo "Waiting for QC report... (Attempt $attempt/5)"
            sleep 10
        fi
    done

    if [[ -z "$qc_output" || "$qc_output" == "None" ]]; then
        echo "Failed to retrieve the QC report from instance $instance_id. Skipping..."
        return 1
    fi

    return 0
}

#This is for the other option to just run check-up commands. A holdover from previous iterations of doubletake, there is work to be done on the commands...especially since we can add more into the mix for an overall health snapshot of the instance
get_instance_info() {
    local region=$1
    local distro_type=$2
    shift 2
    local instance_ids=("$@")

    declare -A commands
    commands=(
        ["Hostname"]="hostname"
        ["Uptime"]="uptime"
        ["Last_Five_Reboots"]="last reboot | head -5"
        ["Kernel_Version"]="uname -r"
        ["Recent_System_Updates"]="$(get_recent_updates_logs "$distro_type")"
        ["Crowdstrike_Version"]='echo "(Current Crowdstrike Version): $(/opt/CrowdStrike/falconctl -g --version 2>/dev/null)"'
        ["Crowdstrike_Status"]='/opt/CrowdStrike/falconctl -g --rfm-state 2>/dev/null | grep -q "rfm-state=false" && echo "(Is Crowdstrike running): Yes" || echo "(Is Crowdstrike running): No"'
    )

    for instance_id in "${instance_ids[@]}"; do
        echo -e "\nReport for Instance ID: $instance_id"

        # Again, checking if the instance is in a valid state for SSM. I will work towards consolidating the two times I call for this, as a pre-requisite to running anything
        if check_instance_state "$instance_id" "$region"; then
            for info in "${!commands[@]}"; do
                command="${commands[$info]}"
                # Same as before, I had to escape the combined commands for JSON to ensure proper quotation as it will hang things up otherwise.
                escaped_command=$(printf '%s' "$command" | sed 's/"/\\"/g')
                output=$(aws ssm send-command \
                    --instance-ids "$instance_id" \
                    --document-name "AWS-RunShellScript" \
                    --timeout-seconds 600 \
                    --parameters commands="[\"$escaped_command\"]" \
                    --query 'Command.CommandId' \
                    --output text --region "$region")

                command_id="$output"

                for attempt in {1..5}; do
                    output=$(aws ssm get-command-invocation \
                        --command-id "$command_id" \
                        --instance-id "$instance_id" \
                        --region "$region" \
                        --query 'StandardOutputContent' \
                        --output text 2>/dev/null)

                    if [[ -n "$output" && "$output" != "None" ]]; then
                        echo "  $info: $output"
                        break
                    else
                        if [[ "$verbose" -eq 1 ]]; then
                            echo "Waiting for command invocation to be available... (Attempt $attempt)"
                        fi
                        sleep 5
                    fi
                done

                if [[ -z "$output" || "$output" == "None" ]]; then
                    echo "  $info: Command execution failed or no data returned."
                fi
            done
        fi
        echo -e "\n"
    done
}

# Where it all begins. Used main as an ode to python since converting this to bash, lol
main() {
    while true; do
        read -p "Enter the path to the file with instance IDs or tag names: " file_path

        echo "Does the list contain:"
        echo "1. AWS Instance IDs"
        echo "2. AWS Instance Tag Names"
        read -p "Enter option 1 or 2: " id_or_tag

        echo "Select the type of Linux distribution:"
        echo "1. Red Hat, AWS, Oracle"
        echo "2. Ubuntu/Debian"
        read -p "Enter option 1 or 2: " distro_type

        echo "Select the type of AWS account:"
        echo "1. Commercial"
        echo "2. Government"
        read -p "Enter option 1 or 2: " account_type

        if [[ "$account_type" -eq 1 ]]; then
            regions=('us-east-1' 'us-east-2' 'us-west-1' 'us-west-2')
        else
            regions=('us-gov-west-1' 'us-gov-east-1')
        fi

        echo "Available regions based on account type:"
        for i in "${!regions[@]}"; do
            echo "$((i + 1)). ${regions[$i]}"
        done
        read -p "Select the region number: " region_index
        region=${regions[$((region_index - 1))]}

        if [[ "$id_or_tag" -eq 1 ]]; then
            mapfile -t instance_ids < "$file_path"
            break
        elif [[ "$id_or_tag" -eq 2 ]]; then
            temp_instance_ids_file=$(convert_tags_to_ids "$region" "$file_path")
            mapfile -t instance_ids < "$temp_instance_ids_file"
            rm "$temp_instance_ids_file"
            break
        else
            echo "Invalid option. Please try again."
        fi
    done

    echo "Choose an operation:"
    echo "1. Run normal commands"
    echo "2. Perform QC with Linux_Patcher"
    read -p "Enter option 1 or 2: " operation

    if [[ "$operation" -eq 1 ]]; then
        get_instance_info "$region" "$distro_type" "${instance_ids[@]}"
    elif [[ "$operation" -eq 2 ]]; then
        read -p "Will you be installing a specific kernel? (yes/no): " install_kernel
        kernel=""
        
        if [[ "$install_kernel" == "yes" ]]; then
            read -p "Enter the kernel version to be installed: " kernel
        fi
        
        read -p "Enter the ServiceNow change number: " change_number

        for instance_id in "${instance_ids[@]}"; do
            echo -e "\nPerforming QC for Instance ID: $instance_id"

            if check_instance_state "$instance_id" "$region"; then
                if [[ -n "$kernel" ]]; then
                    run_linux_patcher "$instance_id" "$region" "$change_number" "-k $kernel"
                else
                    run_linux_patcher "$instance_id" "$region" "$change_number"
                fi
            fi
        done
    else
        echo "Invalid option selected."
    fi
}

main
