#!/bin/bash

# Name: aws_doubletake.sh v2
# AUTHOR: michael.quintero@rackspace.com
# PURPOSE: Intel retrieval from AWS instances with SSM working. Also, for grabbing QC reports.
# FEATURES: Checks uptime, kernel version. User provides an input file with the instance ids to be used. But wait, there's more! Now with 100% MORE QC REPORT! 
# Usage: Make sure you have the aws cli installed and are using the proper aws account credentials. run 'bash aws_doubletake.sh' and answer some questions.

verbose=${VERBOSE:-0}

# I've Base64 encoded the Linux_Patcher_v258-b.sh script so that it won't need to be downloaded, to exclude the internet access requirement
# This was done instead of passing all the logic from the qc function as an SSM command. I could run just a couple of items from the QC function, but the report that is generated makes tickets look nicer. 
LINUX_PATCHER_B64="IyBTY3JpcHQgTmFtZTogbGludXhfcGF0Y2hlcgojCiMgVmVyc2lvbjogMi41LjgtYgojCiMgQXV0
aG9yOiBtaWNoYWVsLnF1aW50ZXJvQHJhY2tzcGFjZS5jb20KIwojIERlc2NyaXB0aW9uOiBUaGlz
IHNjcmlwdCBjYW4gaGVscCBhdXRvbWF0ZSBtdWNoIG9mIG5vdCBhbGwgb2YgdGhlIHN0YW5kYXJk
IHBhdGNoaW5nIHByb2Nlc3MuIEl0IGZlYXR1cmVzIGFuIG9wdGlvbiBzZXQgZm9yIHJ1bm5pbmcg
b24gZnVsbCBhdXRvLCBvciBldmVuIGp1c3QgYSBxdWljayBRQyBjaGVjaywgYW5kIGdlbmVyYXRl
cyBhIGxvZyBmaWxlIGluIHRoZSAkQ0hBTkdFIGRpcmVjdG9yeS4gCiMgSGFzIGxvZ2ljIHRvIGRl
dGVybWluZSBpZiB0aGUgcGF0Y2ggYW5kIHJlYm9vdCBoYXMgYWxyZWFkeSBvY2N1cnJlZCBhbmQg
d2lsbCBjb250aW51ZSB3aXRoIHRoZSByZWFtaW5pbmcgcG9ydGlvbiBvZiB0aGUgcGF0Y2ggcHJv
Y2VzcywgYWZ0ZXIgcmVib290LiBUaGlzIHZlcnNpb24gc3VwcG9ydHMgUmVkaGF0IHZlcnNpb25z
IDctOSwgQW1hem9uIExpbnV4LCBhbmQgRGViaWFuL1VidW50dS4KIwojIEFMV0FZUyBVU0UgVEhF
IEZVTEwgS0VSTkVMIE5BTUUgV0hFTiBTUEVDSUZZSU5HIEEgS0VSTkVMIFRPIFVTRSEhISEgRm9y
IGV4YW1wbGUsIHdpdGggUkhFTCBkaXN0cm9zLCB5b3Ugd2lsbCBzZXQgdGhlIC1rIGZsYWcgd2l0
aCAna2VybmVsLTQuMTguMC01MTMuMjQuMS5lbDhfOScuIERvIG5vdCB1c2UgJzQuMTguMC01MTMu
MjQuMS5lbDhfOScgb3Igbm90aGluZyB3aWxsIGhhcHBlbiEKIwojIFVzYWdlOiBXaGVuIHJ1bm5p
bmcgdGhlIHNjcmlwdCwgeW91IG5lZWQgdG8gYmUgcm9vdC4gQWxzbywgeW91IHdpbGwgQUxXQVlT
IG5lZWQgdG8gc2V0IHRoZSAnLWMnIGNoYW5nZSBzd2l0Y2guCiMKIyBCeSBkZXNpZ24gYXMgYSBm
YWlsc2FmZSwgdGhlIFFDIGZ1bmN0aW9uIGlzIHNldCB0byBydW4gaWYgeW91IGludm9rZSAnbGlu
dXhfcGF0Y2hlciAtYyBDSEcwMTIzNDU2JyB3aXRoIG5vIG90aGVyIHN3aXRjaGVzLiBJIGhhdmUg
bGVmdCB0aGUgJy1xJyBzd2l0Y2ggZm9yIHRoZSB1c2VyIHRvIGludGVudGlvbmFsbHkgaW52b2tl
IHRob3VnaCwgZm9yIGluY3JlYXNlZCB1c2FiaWxpdHkuIAojCiMgVG8gT05MWSBjcmVhdGUgdGhl
IHBhdGNobWUgc2NyaXB0LCBydW4gJ2Jhc2ggbGludXhfcGF0Y2hlciAtYyBDSEcwMTIzNDU2IC1r
ICRNWV9LRVJORUwnCiMKIyBUbyBPTkxZIGluc3RhbGwgYSBzcGVjaWZpZWQga2VybmVsIG9uIHRo
ZSBzeXN0ZW0gYW5kIG5vdCBwZXJmb3JtIGFueSBwYXRjaGluZywgcnVuICdiYXNoIGxpbnV4X3Bh
dGNoZXIgLWMgQ0hHMDEyMzQ1NiAtayAkTVlfS0VSTkVMIC1hJy4gCiMKIyBUbyByZWJvb3QgaW1t
ZWRpYXRlbHkgYWZ0ZXIgdGhlIGtlcm5lbCBpbnN0YWxsIG9yIHBhdGNoIHJ1biwgeW91IG5lZWQg
dG8gc3BlY2lmeSBzdWNoIHVzaW5nICctcicsIGxpa2Ugc28gJ2Jhc2ggbGludXhfcGF0Y2hlciAt
YyBDSEcwMTIzNDU2IC1yIC1rICRNWV9LRVJORUwgLWEnIG9yICdiYXNoIGxpbnV4X3BhdGNoZXIg
LWMgQ0hHMDEyMzQ1NiAtciAtYScsIHJlc3BlY3RpdmVseS4KIwojIFRoZSBzY3JpcHQgd2lsbCBO
T1QgcmVib290IG9uIGl0cyBvd24hISEhISEhISEhISEhISEhISEhISEhIFRoZSAnLXInIGZsYWcg
bmVlZHMgdG8gYmUgc2V0IHRvIGRvIHNvLgojCiMgTGFzdGx5LCBpZiB5b3Ugd2FudCB0byBwZXJm
b3JtIHBhdGNoaW5nIG9mIHRoZSBpbnN0YW5jZS4uLndoaWNoIGZvciByZWRoYXQgaXMganVzdCB0
aGUgc2VjdXJpdHkgcGFja2FnZXMgYW5kIGZvciBVYnVudHUgaXMgYWxsIHBhY2thZ2VzLCBydW4g
J2Jhc2ggbGludXhfcGF0Y2hlciAtYyBDSEcwMTIzNDU2IC1hJy4KIyBBZnRlciBwZXJmb3JtaW5n
IGEgbWFudWFsIHBhdGNoLCB5b3UgY2FuIHJ1biB3aXRoIHRoZSAgJy1wJyBzd2l0Y2ggaWYgeW91
IGRvbid0IHJlYm9vdCwgdG8gZ2VuZXJhdGUgdGhlIG1haW50ZW5hbmNlIHJlcG9ydCwgJ2Jhc2gg
bGludXhfcGF0Y2hlciAtYyBDSEcwMTIzNDU2IC1wJyBvciBpZiB5b3UgZG8gcmVib290LCB5b3Ug
Y2FuIHVzZSB0aGUgJy1hJyBzd2l0Y2hlLCBhbmQgdGhlIHNjcmlwdCB3aWxsIHBpY2sgdXAgd2hl
cmUgaXQgbGVmdCBvZmYuCgoKIyEvYmluL2Jhc2gKCiMgQmV0dGVyIGJlIHRoZSByb290IHVzZXIg
b3RoZXJ3aXNlLCBubyBkaWNlIQppZiBbWyAiJEVVSUQiIC1uZSAwIF1dOyB0aGVuCiAgIGVjaG8g
IllPVSBORUVEIFRPIFJVTiBUSEUgU0NSSVBUIEFTIFJPT1QsIFRSWSBBR0FJTiEiIAogICBleGl0
IDEKZmkKCnNpbGVudF9tb2RlPTAKCiMgR290dGEgZmlndXJlIG91dCB3aG8geW91IGFyZS4gVGhp
cyBpcyBhIGJpZyBkb2cgZnVuY3Rpb24uCmRpc3Ryb19iYWxsKCkgewogICAgaWYgWyAtZiAvZXRj
L29zLXJlbGVhc2UgXTsgdGhlbgogICAgICAgIC4gL2V0Yy9vcy1yZWxlYXNlCiAgICAgICAgZGlz
X3ZlcnNpb249JFZFUlNJT05fSUQKICAgICAgICBkaXNfbmFtZT0kSUQKICAgICAgICBlY2hvICJE
RVRFQ1RFRCBESVNUUklCVVRJT046ICRkaXNfbmFtZSwgVkVSU0lPTjogJGRpc192ZXJzaW9uIgog
ICAgZWxzZQogICAgICAgIGVjaG8gIkNBTk5PVCBERVRFUk1JTkUgVEhFIERJU1RSSUJVVElPTiBP
UiBWRVJTSU9OLiIKICAgICAgICByZXR1cm4gMQogICAgZmkKCiMgUHJpbWFyeSBpZGVudGlmaWNh
dGlvbiBsb2dpYyBmb3IgdGhlIGRpc3Ryb3MgbGl2ZXMgaGVyZS4gVHJlYWQgY2FyZWZ1bGx5Li4u
dGhlIGdsb2JhbCB2YXJpYWJsZSAncGFja2FnZV9tYW5hZ2VyJyBsaXZlcyBoZXJlLgogICAgY2Fz
ZSAkZGlzX25hbWUgaW4KICAgICAgICByaGVsfGNlbnRvc3xmZWRvcmF8YW16bnxvbCkKICAgICAg
ICAgICAgZXhwb3J0IHBhY2thZ2VfbWFuYWdlcj0ieXVtIgogICAgICAgICAgICBpZiBbWyAiJGRp
c19uYW1lIiA9PSAiYW16biIgfHwgIiRkaXNfbmFtZSIgPT0gIm9sIiBdXTsgdGhlbgogICAgICAg
ICAgICAgICAgZWNobyAiJChncmVwICJeUFJFVFRZX05BTUU9IiAvZXRjL29zLXJlbGVhc2UgfCBj
dXQgLWQnIicgLWYyKSIKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgZWNobyAiUmVk
IEhhdCBWZXJzaW9uIDogJChjYXQgL2V0Yy9yZWRoYXQtcmVsZWFzZSkiCiAgICAgICAgICAgIGZp
CiAgICAgICAgICAgIGVjaG8gIkN1cnJlbnQgS2VybmVsOiAkKHVuYW1lIC1yKSIKICAgICAgICAg
ICAgbmV4dF9rZXJuZWw9JCh5dW0gY2hlY2stdXBkYXRlIGtlcm5lbCB8IGdyZXAgLUUgJ2tlcm5l
bC54ODZfNjQqJyB8IGF3ayAne3ByaW50ICQyfScpCiAgICAgICAgICAgIFtbIC16ICIkbmV4dF9r
ZXJuZWwiIF1dICYmIGVjaG8gIk5vIG5ldyBrZXJuZWwgdmVyc2lvbiBhdmFpbGFibGUuIiB8fCBl
Y2hvICJOZXh0IEtlcm5lbCBWZXJzaW9uOiAke25leHRfa2VybmVsfSIKICAgICAgICAgICAgJHBh
Y2thZ2VfbWFuYWdlciB1cGRhdGVpbmZvIGxpc3Qgc2VjdXJpdHkgaW5zdGFsbGVkIHwgZ3JlcCBS
SFNBID4gL3Jvb3QvJENIQU5HRS9zZWN1cml0eV9pbnN0YWxsZWQuYmVmb3JlCiAgICAgICAgICAg
IDs7CiAgICAgICAgZGViaWFufHVidW50dSkKICAgICAgICAgICAgZXhwb3J0IHBhY2thZ2VfbWFu
YWdlcj0iYXB0IgogICAgICAgICAgICBlY2hvICIkKGdyZXAgIl5QUkVUVFlfTkFNRT0iIC9ldGMv
b3MtcmVsZWFzZSB8IGN1dCAtZCciJyAtZjIpIgogICAgICAgICAgICBlY2hvICJDdXJyZW50IEtl
cm5lbDogJCh1bmFtZSAtcikiCiAgICAgICAgICAgIG5leHRfa2VybmVsPSQoYXB0LWdldCB1cGRh
dGUgPiAvZGV2L251bGw7IGFwdC1nZXQgLS1qdXN0LXByaW50IHVwZ3JhZGUgfCBncmVwIC1pIGxp
bnV4LWltYWdlKQogICAgICAgICAgICBbWyAteiAiJG5leHRfa2VybmVsIiBdXSAmJiBlY2hvICJO
byBuZXcga2VybmVsIHZlcnNpb24gYXZhaWxhYmxlLiIgfHwgZWNobyAiTmV4dCBLZXJuZWwgVmVy
c2lvbjogJHtuZXh0X2tlcm5lbH0iCiAgICAgICAgICAgIDs7CiAgICAgICAgKikKICAgICAgICAg
ICAgZWNobyAiVU5TVVBQT1JURUQgRElTVFJJQlVUSU9OOiAkZGlzX25hbWUiCiAgICAgICAgICAg
IHJldHVybiAxCiAgICAgICAgICAgIDs7CiAgICBlc2FjCn0KCiMgRnVuY3Rpb24gd2hlcmUgbW9z
dCBvZiB0aGUgdXBkYXRpbmcgaGFwcGVucy4gVXNlZCB0byBiZSBjYWxsZWQsIEZhbGNvbl9jaGVj
a2VyLCBidXQgaXQncyBiZWVuIGV4YXBhbmRlZCB0byB0YWtlIG9uIG1vcmUgd29yay4KbW9kZXJu
aXplKCkgewogICAgaWYgW1sgLW4gIiRLZXJuZWwiIF1dOyB0aGVuCiAgICAgICAgaWYgW1sgIiRw
YWNrYWdlX21hbmFnZXIiID09ICJ5dW0iIF1dOyB0aGVuCiAgICAgICAgICAgIGVjaG8gIkluc3Rh
bGxpbmcgc3BlY2lmaWMga2VybmVsIHZlcnNpb24gJEtlcm5lbCBvbiBSSEVMLWJhc2VkIGRpc3Ry
aWJ1dGlvbi4iCiAgICAgICAgICAgICRwYWNrYWdlX21hbmFnZXIgaW5zdGFsbCAkS2VybmVsIC15
CiAgICAgICAgZWxpZiBbWyAiJHBhY2thZ2VfbWFuYWdlciIgPT0gImFwdCIgXV07IHRoZW4KICAg
ICAgICAgICAgZWNobyAiSW5zdGFsbGluZyBzcGVjaWZpYyBrZXJuZWwgdmVyc2lvbiAkS2VybmVs
IG9uIERlYmlhbi1iYXNlZCBkaXN0cmlidXRpb24uIgogICAgICAgICAgICAkcGFja2FnZV9tYW5h
Z2VyIGluc3RhbGwgJEtlcm5lbCAteQogICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAiVW5z
dXBwb3J0ZWQgcGFja2FnZSBtYW5hZ2VyIG9yIGRpc3RyaWJ1dGlvbi4iCiAgICAgICAgZmkKICAg
ICAgICByZXR1cm4KICAgIGZpCgogICAgaWYgcGdyZXAgLWYgIi9vcHQvQ3Jvd2RTdHJpa2UvZmFs
Y29uZCIgPiAvZGV2L251bGwgMj4mMTsgdGhlbgogICAgICAgIGVjaG8gIkZBTENPTkNUTCBJUyBS
VU5OSU5HLiBDSEVDS0lORyBLRVJORUwgVkVSU0lPTiBDT01QQVRBQklMSVRZLiIKICAgICAgICBu
ZXh0X2tlcm5lbF92ZXJzaW9uPSQoJHBhY2thZ2VfbWFuYWdlciBjaGVjay11cGRhdGUga2VybmVs
IHwgZ3JlcCAtRSAna2VybmVsLng4Nl82NConIHwgYXdrICd7cHJpbnQgJDJ9JykKCiAgICAgICAg
aWYgW1sgLXogIiRuZXh0X2tlcm5lbF92ZXJzaW9uIiBdXTsgdGhlbgogICAgICAgICAgICBlY2hv
ICJOTyBLRVJORUwgVVBEQVRFUyBGT1VORC4gUlVOTklORyAkcGFja2FnZV9tYW5hZ2VyIHVwZGF0
ZS1taW5pbWFsIFdJVEggS0VSTkVMIEVYQ0xVU0lPTi4iCiAgICAgICAgICAgICRwYWNrYWdlX21h
bmFnZXIgdXBkYXRlLW1pbmltYWwgLS1zZWN1cml0eSAtLWV4Y2x1ZGU9a2VybmVsKiAteQogICAg
ICAgICAgICByZXR1cm4gCiAgICAgICAgZmkKCiAgICAgICAgZmFsY29uX2NoZWNrX291dHB1dD0k
KC9vcHQvQ3Jvd2RTdHJpa2UvZmFsY29uLWtlcm5lbC1jaGVjayAtayAiJG5leHRfa2VybmVsX3Zl
cnNpb24iIDI+JjEpCiAgICAgICAgaWYgZWNobyAiJGZhbGNvbl9jaGVja19vdXRwdXQiIHwgZ3Jl
cCAtcSAiaXMgbm90IHN1cHBvcnRlZCBieSBTZW5zb3IiOyB0aGVuCiAgICAgICAgICAgIGVjaG8g
IlRIRSBORVdFU1QgQVZBSUxBQkxFIEtFUk5FTCBWRVJTSU9OIElTIE5PVCBTVVBQT1JURUQgQlkg
RkFMQ09OIFNFTlNPUi4gUlVOTklORyAkcGFja2FnZV9tYW5hZ2VyIFVQREFURSBXSVRIIEtFUk5F
TCBFWENMVVNJT04uIgogICAgICAgICAgICAkcGFja2FnZV9tYW5hZ2VyIHVwZGF0ZS1taW5pbWFs
IC0tc2VjdXJpdHkgLS1leGNsdWRlPWtlcm5lbCogLXkKICAgICAgICBlbGlmIGVjaG8gIiRmYWxj
b25fY2hlY2tfb3V0cHV0IiB8IGdyZXAgLXEgIkNST1dEU1RSSUtFIE5PVCBGT1VORCI7IHRoZW4K
ICAgICAgICAgICAgZWNobyAiQ1JPV0RTVFJJS0UgQ09NTUFORCBGQUlMVVJFOiBDUk9XRFNUUklL
RSBOT1QgRk9VTkQuIgogICAgICAgICAgICAkcGFja2FnZV9tYW5hZ2VyIHVwZGF0ZSAtLXNlY3Vy
aXR5IC15CiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICJORVhUIEtFUk5FTCBWRVJTSU9O
IElTIFNVUFBPUlRFRCBCWSBGQUxDT04gU0VOU09SLiBSVU5OSU5HIEZVTEwgJHBhY2thZ2VfbWFu
YWdlciBVUERBVEUuIgogICAgICAgICAgICAkcGFja2FnZV9tYW5hZ2VyIHVwZGF0ZSAtLXNlY3Vy
aXR5IC15CiAgICAgICAgZmkKICAgIGVsc2UKICAgICAgICBlY2hvICJGQUxDT05DVEwgSVMgTk9U
IEZPVU5EIE9SIFJVTk5JTkcuIFBFUkZPUk1JTkcgUkVHVUxBUiBTWVNURU0gVVBEQVRFUy4iCiAg
ICAgICAgaWYgWyAiJHBhY2thZ2VfbWFuYWdlciIgPSAieXVtIiBdOyB0aGVuCiAgICAgICAgICAg
ICRwYWNrYWdlX21hbmFnZXIgdXBkYXRlIC0tc2VjdXJpdHkgLXkKICAgICAgICBlbGlmIFsgIiRw
YWNrYWdlX21hbmFnZXIiID0gImFwdCIgXTsgdGhlbgogICAgICAgICAgICAkcGFja2FnZV9tYW5h
Z2VyIHVwZGF0ZSAmJiAkcGFja2FnZV9tYW5hZ2VyIHVwZ3JhZGUgLXkKICAgICAgICBmaQogICAg
ZmkKfQoKIyBIYWQgdG8gc3BsaXQgdGhlIGxvZ2ljIGZvciBjcmVhdGluZyBzZWN1cml0eSB1cGRh
dGUgQ1lBIGZpbGVzIGluIHRoZSBjaGFuZ2UgZGlyZWN0b3J5LCBmcm9tIHRoZSBiZWZvcmUgYW5k
IGFmdGVyIG1hcmtlcnMgdG8gcmVkdWNlIHJlZHVuZHVhbmN5IGJ5IGhhdmluZyB0byBpbmNsdWRl
IHRyaGUgbG9naWMgbW9yZSB0aGFuIG9uY2UuIAojIFNvIEkgb3B0ZWQgdG8gY2FsbCBvbmNlIGlu
IHRoZSBwb3N0X3JlYm9vdF9vcGVyYXRpb25zCnBvc3Rfc2VjdXJpdHlfb3AoKSB7CiAgICBpZiBb
WyAiJHBhY2thZ2VfbWFuYWdlciIgPT0gInl1bSIgXV07IHRoZW4KICAgICAgICBlY2hvICJSVU5O
SU5HIE9QRVJBVElPTlMgRk9SIFJFRCBIQVQvQU1BWk9OL09SQUNMRSBMSU5VWCIKICAgICAgICAk
cGFja2FnZV9tYW5hZ2VyIHVwZGF0ZWluZm8gbGlzdCBzZWN1cml0eSBpbnN0YWxsZWQgfCBncmVw
IFJIU0EgPiAvcm9vdC8kQ0hBTkdFL3NlY3VyaXR5X2luc3RhbGxlZC5hZnRlcgogICAgZWxpZiBb
WyAiJHBhY2thZ2VfbWFuYWdlciIgPT0gImFwdCIgXV07IHRoZW4KICAgICAgICBlY2hvICJSVU5O
SU5HIE9QRVJBVElPTlMgRk9SIERFQklBTi9VQlVOVFUiCiAgICAgICAgbWFpbnRkYXRlPSQoZGF0
ZSAiKyVZLSVtLSVkIikKICAgICAgICBncmVwICIgaW5zdGFsbGVkICIgL3Zhci9sb2cvZHBrZy5s
b2cgfCBncmVwICIkbWFpbnRkYXRlIiB8IGF3ayAne3ByaW50ICQ0LCAkNX0nIHwgdW5pcSB8IHNv
cnQgPiAvcm9vdC8kQ0hBTkdFL3NlY3VyaXR5X2luc3RhbGxlZC5hZnRlcgogICAgZWxzZQogICAg
ICAgIGVjaG8gIlVOU1VQUE9SVEVEIFBBQ0tBR0UgTUFOQUdFUjogJHBhY2thZ2VfbWFuYWdlciIK
ICAgICAgICByZXR1cm4gMQogICAgZmkKfQoKIyBGb3IgYmVmb3JlL2FmdGVyIGNvbXBhcmlzb25z
LCBjYWxsZWQgaW4gdGhlIHByZV9yZWJvb3Rfb3BlcmF0aW9ucygpIGZ1bmN0aW9uCmJlZm9yZV9t
YXJrZXJzKCkgewogICAgc3MgLW50bHAgfCBhd2sgJ3twcmludCAkNn0nIHwgYXdrIC1GICc6JyAn
e3ByaW50ICRORn0nIHwgc29ydCB8IHVuaXEgPiAvcm9vdC8kQ0hBTkdFL25ldHN0YXRfcnVubmlu
Zy5iZWZvcmUKICAgIHBzIC1lIC1vIHBwaWQscGlkLGNtZCB8IGVncmVwICdeXHMrMVxzKycgPiAv
cm9vdC8kQ0hBTkdFL3BzX3J1bm5pbmcuYmVmb3JlCiAgICBzeXN0ZW1jdGwgbGlzdC11bml0cyAt
LXR5cGU9c2VydmljZSA+IC9yb290LyRDSEFOR0Uvc3lzdGVtY3RsX3J1bm5pbmcuYmVmb3JlCiAg
ICBtb3VudCA+IC9yb290LyRDSEFOR0UvbW91bnQuYmVmb3JlCiAgICB1bmFtZSAtciA+IC9yb290
LyRDSEFOR0Uva2VybmVsLmJlZm9yZQogICAgZWNobyAiKENyb3dkc3RyaWtlIFJ1bm5pbmc/KTog
JCgvb3B0L0Nyb3dkU3RyaWtlL2ZhbGNvbmN0bCAtZyAtLXJmbS1zdGF0ZSAyPi9kZXYvbnVsbCB8
fCBlY2hvICJDUk9XRFNUUklLRSBOT1QgRk9VTkQgUlVOTklORyBPTiBUSElTIFNZU1RFTSEhISIp
IiA+IC9yb290LyRDSEFOR0UvY3Jvd2RzdHJpa2UuYmVmb3JlCiAgICBlY2hvICJIb3N0bmFtZTog
JChob3N0bmFtZSkiICYmIGVjaG8gIklQIEFkZHJlc3M6ICQoaG9zdG5hbWUgLUkpIiA+IC9yb290
LyRDSEFOR0UvaG9zdG5hbWVfaW5mby5iZWZvcmUKICAgIGVjaG8gIi9ldGMvaG9zdHMgY2hlY2tz
dW06ICQobWQ1c3VtIC9ldGMvaG9zdHMgfCBjdXQgLWQgJyAnIC1mMSkiID4gL3Jvb3QvJENIQU5H
RS9ob3N0c19pbmZvLmJlZm9yZSAKICAgIGVjaG8gIi9ldGMvcmVzb2x2LmNvbmYgY2hlY2tzdW06
ICQobWQ1c3VtIC9ldGMvcmVzb2x2LmNvbmYgfCBjdXQgLWQgJyAnIC1mMSkiID4gL3Jvb3QvJENI
QU5HRS9yZXNvbHZfaW5mby5iZWZvcmUKfQoKIyBGb3IgYmVmb3JlL2FmdGVyIGNvbXBhcmlzb25z
LCBidXQgaGFzIGEgbGl0dGxlIG1vcmUgaW5mbyBmb3IgdGhlIHJlcG9ydC4gSXMgY2FsbGVkIGlu
IHRoZSBwb3N0X3JlYm9vdF9vcGVyYXRpb25zKCkKYWZ0ZXJfbWFya2VycygpIHsKICAgIHNzIC1u
dGxwIHwgYXdrICd7cHJpbnQgJDZ9JyB8IGF3ayAtRiAnOicgJ3twcmludCAkTkZ9JyB8IHNvcnQg
fCB1bmlxID4gL3Jvb3QvJENIQU5HRS9uZXRzdGF0X3J1bm5pbmcuYWZ0ZXIKICAgIHBzIC1lIC1v
IHBwaWQscGlkLGNtZCB8IGVncmVwICdeXHMrMVxzKycgPiAvcm9vdC8kQ0hBTkdFL3BzX3J1bm5p
bmcuYWZ0ZXIKICAgIHN5c3RlbWN0bCBsaXN0LXVuaXRzIC0tdHlwZT1zZXJ2aWNlID4gL3Jvb3Qv
JENIQU5HRS9zeXN0ZW1jdGxfcnVubmluZy5hZnRlcgogICAgbW91bnQgPiAvcm9vdC8kQ0hBTkdF
L21vdW50LmFmdGVyCiAgICB1bmFtZSAtciA+IC9yb290LyRDSEFOR0Uva2VybmVsLmFmdGVyCiAg
ICBncmVwIC5zZXJ2aWNlIC9yb290LyRDSEFOR0Uvc3lzdGVtY3RsX3J1bm5pbmcuYmVmb3JlIHwg
YXdrICd7cHJpbnQgJDEsJDIsJDMsJDR9JyB8IHNvcnQgPiAvcm9vdC8kQ0hBTkdFL3N5c3RlbWN0
bF9ydW5uaW5nLmJlZm9yZS4xCiAgICBncmVwIC5zZXJ2aWNlIC9yb290LyRDSEFOR0Uvc3lzdGVt
Y3RsX3J1bm5pbmcuYWZ0ZXIgfCBhd2sgJ3twcmludCAkMSwkMiwkMywkNH0nIHwgc29ydCA+IC9y
b290LyRDSEFOR0Uvc3lzdGVtY3RsX3J1bm5pbmcuYWZ0ZXIuMQogICAgZ3JlcCBeL2RldiAvcm9v
dC8kQ0hBTkdFL21vdW50LmJlZm9yZSA+IC9yb290LyRDSEFOR0UvbW91bnQuYmVmb3JlLjEKICAg
IGdyZXAgXi9kZXYgL3Jvb3QvJENIQU5HRS9tb3VudC5hZnRlciA+IC9yb290LyRDSEFOR0UvbW91
bnQuYWZ0ZXIuMQogICAgZWNobyAiKENyb3dkc3RyaWtlIFJ1bm5pbmc/KTogJCgvb3B0L0Nyb3dk
U3RyaWtlL2ZhbGNvbmN0bCAtZyAtLXJmbS1zdGF0ZSAyPi9kZXYvbnVsbCB8fCBlY2hvICJDUk9X
RFNUUklLRSBOT1QgRk9VTkQgUlVOTklORyBPTiBUSElTIFNZU1RFTSEhISIpIiA+IC9yb290LyRD
SEFOR0UvY3Jvd2RzdHJpa2UuYWZ0ZXIKICAgIGRpZmYgLVUwIC9yb290LyRDSEFOR0Uvc3lzdGVt
Y3RsX3J1bm5pbmcuYmVmb3JlLjEgL3Jvb3QvJENIQU5HRS9zeXN0ZW1jdGxfcnVubmluZy5hZnRl
ci4xCiAgICBkaWZmIC1VMCAvcm9vdC8kQ0hBTkdFL21vdW50LmJlZm9yZS4xIC9yb290LyRDSEFO
R0UvbW91bnQuYWZ0ZXIuMQogICAgZWNobyAiSG9zdG5hbWU6ICQoaG9zdG5hbWUpIiAmJiBlY2hv
ICJJUCBBZGRyZXNzOiAkKGhvc3RuYW1lIC1JKSIgPiAvcm9vdC8kQ0hBTkdFL2hvc3RuYW1lX2lu
Zm8uYWZ0ZXIKICAgIGVjaG8gIi9ldGMvaG9zdHMgY2hlY2tzdW06ICQobWQ1c3VtIC9ldGMvaG9z
dHMgfCBjdXQgLWQgJyAnIC1mMSkiID4gL3Jvb3QvJENIQU5HRS9ob3N0c19pbmZvLmFmdGVyCiAg
ICBlY2hvICIvZXRjL3Jlc29sdi5jb25mIGNoZWNrc3VtOiAkKG1kNXN1bSAvZXRjL3Jlc29sdi5j
b25mIHwgY3V0IC1kICcgJyAtZjEpIiA+IC9yb290LyRDSEFOR0UvcmVzb2x2X2luZm8uYWZ0ZXIK
fQoKIyBUbyBzZWUgY2hhbmdlcy91cGRhdGVzIHRvIHRoZSBpbnN0YW5jZSBpbiBhIG5lYXQgbGl0
dGxlIHJlcG9ydC4gQSBsb2cgZmlsZSBpcyBnZW5lcmF0ZWQgaW4gdGhlIGNoYW5nZSBkaXJlY3Rv
cnkgYnR3LiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBpbiB0aGUgcG9zdF9yZWJvb3Rfb3BlcmF0
aW9ucygpCm1haW50ZW5hbmNlX3JlcG9ydCgpIHsKICAgIG1haW50ZGF0ZT0kKGRhdGUgIislZCAl
YiAlWSIpCiAgICAKICAgIGlmIFsgLXogIiRDSEFOR0UiIF07IHRoZW4KICAgICAgICBlY2hvICJD
SEFOR0UgVkFSSUFCTEUgSVMgTk9UIFNFVCwgRVhJVElORy4iCiAgICAgICAgcmV0dXJuIDEKICAg
IGZpCgogICAgTE9HX0ZJTEU9Ii9yb290LyRDSEFOR0UvbWFpbnRlbmFuY2Vsb2cudHh0IgoKIyBT
ZWUgdGhlIGJlbG93IGluIHRoZSBlY2hvIGJsb2NrLiBUaGlzIGlzIHdoZXJlIHdlIGdldCB0aGUg
YW1vdW50IG9mIHBhY2thZ2VzIGluc3RhbGxlZC4KY291bnRfcGFja2FnZXNfaW5zdGFsbGVkX2xh
c3RfdXBkYXRlKCkgewogICAgaWYgW1sgIiRwYWNrYWdlX21hbmFnZXIiID09ICJ5dW0iIF1dOyB0
aGVuCiAgICAgICAgcnBtIC1xYSAtLWxhc3QgMj4vZGV2L251bGwgfCBncmVwICIkbWFpbnRkYXRl
IiB8IHVuaXEgfCB3YyAtbAogICAgZWxpZiBbWyAiJHBhY2thZ2VfbWFuYWdlciIgPT0gImFwdCIg
XV07IHRoZW4KICAgICAgICBtYWludGRhdGU9JChkYXRlICIrJVktJW0tJWQiKQogICAgICAgIGdy
ZXAgIiBpbnN0YWxsZWQgIiAvdmFyL2xvZy9kcGtnLmxvZyB8IGdyZXAgIiRtYWludGRhdGUiIHwg
YXdrICd7cHJpbnQgJDQsICQ1fScgfCB1bmlxIHwgd2MgLWwKICAgIGVsc2UKICAgICAgICBlY2hv
ICJVTlNVUFBPUlRFRCBQQUNLQUdFIE1BTkFHRVI6ICRwYWNrYWdlX21hbmFnZXIiCiAgICBmaQp9
CgojIFNlZSBqdXN0IGEgdGFkIGZ1dGhlciBiZWxvdyBpbiB0aGUgZWNobyBibG9jay4gVGhpcyBp
cyB3aGVyZSB3ZSBsaXN0IHRoZSBwYWNrYWdlcyBpbnN0YWxsZWQuIElmIHdlIGRvbid0IHdhbnQg
dGhpcyBpbmZvLCBqdXN0IGNvbW1lbnQgb3V0IGxpbmVzIDIwMiBhbmQgMjAzLiBJIGZlbHQgaXQg
d2FzIGltcG9ydGFudCB0byBpbmNsdWRlIHN1Y2ggdmVyYm9zZSBpbmZvLCBhcyBhIENZQS4KcGFj
a2FnZXNfaW5zdGFsbGVkX2xhc3RfdXBkYXRlKCkgewogICAgaWYgW1sgIiRwYWNrYWdlX21hbmFn
ZXIiID09ICJ5dW0iIF1dOyB0aGVuCiAgICAgICAgcnBtIC1xYSAtLWxhc3QgMj4vZGV2L251bGwg
fCBncmVwICIkbWFpbnRkYXRlIiB8IHNvcnQgfCB1bmlxCiAgICBlbGlmIFtbICIkcGFja2FnZV9t
YW5hZ2VyIiA9PSAiYXB0IiBdXTsgdGhlbgogICAgICAgIG1haW50ZGF0ZT0kKGRhdGUgIislWS0l
bS0lZCIpCiAgICAgICAgZ3JlcCAiIGluc3RhbGxlZCAiIC92YXIvbG9nL2Rwa2cubG9nIHwgZ3Jl
cCAiJG1haW50ZGF0ZSIgfCBhd2sgJ3twcmludCAkNCwgJDV9JyB8IHNvcnQgfCB1bmlxCiAgICBl
bHNlCiAgICAgICAgZWNobyAiVU5TVVBQT1JURUQgUEFDS0FHRSBNQU5BR0VSOiAkcGFja2FnZV9t
YW5hZ2VyIgogICAgZmkKfQoKICAgIHsKICAgICAgICBlY2hvICI9PT09PSBNYWludGVuYW5jZSBy
ZXBvcnQgZm9yICQoaG9zdG5hbWUgLXMpID09PT09IgogICAgICAgIGVjaG8gIihDdXJyZW50IGRh
dGUpOiAkKGRhdGUpIgogICAgICAgIGVjaG8gIihTZXJ2ZXIgcnVubmluZyBzaW5jZSk6ICQodXB0
aW1lIC1zKSIKICAgICAgICAvb3B0L0Nyb3dkU3RyaWtlL2ZhbGNvbmN0bCAtZyAtLXJmbS1zdGF0
ZSAyPi9kZXYvbnVsbCB8IGdyZXAgLXEgJ3JmbS1zdGF0ZT1mYWxzZScgJiYgZWNobyAiKElzIENy
b3dkc3RyaWtlIHJ1bm5pbmcpOiBZZXMiIHx8IGVjaG8gIihJcyBDcm93ZHN0cmlrZSBydW5uaW5n
KTogTm8iCiAgICAgICAgZWNobyAiKFBhY2thZ2VzIGluc3RhbGxlZCBkdXJpbmcgbWFpbnRlbmFu
Y2UpOiAkKGNvdW50X3BhY2thZ2VzX2luc3RhbGxlZF9sYXN0X3VwZGF0ZSkiCiAgICAgICAgZWNo
byAiKFByZXZpb3VzIHJ1bm5pbmcga2VybmVsIHZlcnNpb24pOiAkKGNhdCAvcm9vdC8kQ0hBTkdF
L2tlcm5lbC5iZWZvcmUpIgogICAgICAgIGVjaG8gIihDdXJyZW50IHJ1bm5pbmcga2VybmVsIHZl
cnNpb24pOiAkKHVuYW1lIC1yKSIKICAgICAgICBlY2hvICIoS2VybmVsIHBhY2thZ2VzIGluc3Rh
bGxlZCBkdXJpbmcgbWFpbnRlbmFuY2UpOgogICAgICAgICQocGFja2FnZXNfaW5zdGFsbGVkX2xh
c3RfdXBkYXRlKSIKICAgICAgICBob3N0bmFtZV9jaGFuZ2VkPSQoZGlmZiA8KGdyZXAgJ0hvc3Ru
YW1lJyAvcm9vdC8kQ0hBTkdFL2hvc3RuYW1lX2luZm8uYmVmb3JlKSA8KGdyZXAgJ0hvc3RuYW1l
JyAvcm9vdC8kQ0hBTkdFL2hvc3RuYW1lX2luZm8uYWZ0ZXIpID4gL2Rldi9udWxsICYmIGVjaG8g
Ik5vIiB8fCBlY2hvICJZZXMiKQogICAgICAgIGhvc3RzX2NoYW5nZWQ9JChkaWZmIDwoZ3JlcCAn
L2V0Yy9ob3N0cyBjaGVja3N1bScgL3Jvb3QvJENIQU5HRS9ob3N0c19pbmZvLmJlZm9yZSkgPChn
cmVwICcvZXRjL2hvc3RzIGNoZWNrc3VtJyAvcm9vdC8kQ0hBTkdFL2hvc3RzX2luZm8uYWZ0ZXIp
ID4gL2Rldi9udWxsICYmIGVjaG8gIk5vIiB8fCBlY2hvICJZZXMiKQogICAgICAgIHJlc29sdl9j
b25mX2NoYW5nZWQ9JChkaWZmIDwoZ3JlcCAnL2V0Yy9yZXNvbHYuY29uZiBjaGVja3N1bScgL3Jv
b3QvJENIQU5HRS9yZXNvbHZfaW5mby5iZWZvcmUpIDwoZ3JlcCAnL2V0Yy9yZXNvbHYuY29uZiBj
aGVja3N1bScgL3Jvb3QvJENIQU5HRS9yZXNvbHZfaW5mby5hZnRlcikgPiAvZGV2L251bGwgJiYg
ZWNobyAiTm8iIHx8IGVjaG8gIlllcyIpCiAgICAgICAgZWNobyAiKEhvc3RuYW1lIGNoYW5nZWQ/
KTogJGhvc3RuYW1lX2NoYW5nZWQiCiAgICAgICAgZWNobyAiKEhvc3RzIGZpbGUgY2hhbmdlZD8p
OiAkaG9zdHNfY2hhbmdlZCIKICAgICAgICBlY2hvICIoUmVzb2x2LmNvbmYgY2hhbmdlPyk6ICRy
ZXNvbHZfY29uZl9jaGFuZ2VkIgogICAgfSB8IHRlZSAtYSAiJExPR19GSUxFIgp9CgojIEJpZyBk
YXdnIGZ1bmN0aW9uLCBmb3IgdGhvc2UgdGltZXMgd2hlbiB5b3UganVzdCB3YW50IHRoZSBpbnN0
YW5jZSB0byBnaXZlIGEgcXVpY2sgZGlhZ25vc3RpYyByZXBvcnQsIGluIHJlbGF0aW9uIHRvIHBh
dGNoaW5nLgpRQygpIHsKICAgICAgICBpZiBbWyAkc2lsZW50X21vZGUgLWVxIDEgXV07IHRoZW4K
ICAgICAgICBleGVjIDM+JjEgND4mMiAgIyBTYXZlIFNURE9VVCAmIFNUREVSUgogICAgICAgIGV4
ZWMgMT4vZGV2L251bGwgMj4mMSAgIyBSZWRpcmVjdCBTVERPVVQgJiBTVERFUlIgdG8gL2Rldi9u
dWxsCiAgICBmaQoKICAgIGNsZWFyCmNvbG9ycz0oMzEgMzIgMzMgMzQgMzUgMzYpCgphbmltYXRl
X3RleHQoKSB7CiAgICBsb2NhbCB0ZXh0PSJRQyBTRVFVRU5DRSBJTklUSUFURUQuLi4iCiAgICBs
b2NhbCBkZWxheT0wLjIKICAgIGxvY2FsIGR1cmF0aW9uPTMKICAgIGxvY2FsIGVuZF90aW1lPSQo
KFNFQ09ORFMgKyBkdXJhdGlvbikpCgogICAgZWNobyAtbmUgIlxyXDAzM1tLIgoKICAgIHdoaWxl
IFsgJFNFQ09ORFMgLWx0ICRlbmRfdGltZSBdOyBkbwogICAgICAgIGZvciBjb2xvciBpbiAiJHtj
b2xvcnNbQF19IjsgZG8KICAgICAgICAgICAgaWYgWyAkU0VDT05EUyAtZ2UgJGVuZF90aW1lIF07
IHRoZW4KICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGZpCiAgICAgICAgICAgIGVj
aG8gLW5lICJcMDMzWyR7Y29sb3J9bSR7dGV4dH1cMDMzWzBtIgogICAgICAgICAgICBzbGVlcCAk
ZGVsYXkKICAgICAgICAgICAgZWNobyAtbmUgIlxyXDAzM1tLIgogICAgICAgIGRvbmUKICAgIGRv
bmUKfQoKYW5pbWF0ZV90ZXh0CgojIFRoaXMgaXMgYSBmYWlsc2FmZSwgaW4gdGhlIGV2ZW50IHRo
ZSAnLWMnIHN3aXRjaCBkb2Vzbid0IHNldCwgZm9yIHdoYXRldmVyIHJlYXNvbiwgdGhlIGNoYW5n
ZSBkaXJlY3RvcnkKWyAhIC1kICIvcm9vdC8kQ0hBTkdFIiBdICYmIG1rZGlyIC1wICIvcm9vdC8k
Q0hBTkdFIgoKICAgIGlmIFtbIC1mIC9ldGMvb3MtcmVsZWFzZSBdXTsgdGhlbgogICAgICAgIC4g
L2V0Yy9vcy1yZWxlYXNlCiAgICAgICAgY2FzZSAkSUQgaW4KICAgICAgICAgICAgdWJ1bnR1fGRl
YmlhbikKICAgICAgICAgICAgICAgIHBhY2thZ2VfbWFuYWdlcj0iYXB0IgogICAgICAgICAgICAg
ICAgOzsKICAgICAgICAgICAgcmhlbHxhbXpufG9sKSAjIEFkZGVkICdvbCcgZm9yIE9yYWNsZSBM
aW51eAogICAgICAgICAgICAgICAgcGFja2FnZV9tYW5hZ2VyPSJ5dW0iCiAgICAgICAgICAgICAg
ICA7OwogICAgICAgICAgICAqKQogICAgICAgICAgICAgICAgZWNobyAiRElTVFJJQlVUSU9OICRJ
RCBOT1QgU1VQUE9SVEVEIEJZIFRISVMgU0NSSVBULiIKICAgICAgICAgICAgICAgIHRlc3RfcmVw
b3NfcmVzdWx0PSJGQUlMRUQiCiAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICAg
ICAgOzsKICAgICAgICBlc2FjCiAgICBlbHNlCiAgICAgICAgZWNobyAiVU5BQkxFIFRPIERFVEVS
TUlORSBESVNUUklCVVRJT04uIgogICAgICAgIHRlc3RfcmVwb3NfcmVzdWx0PSJGQUlMRUQiCiAg
ICAgICAgcmV0dXJuIDEKICAgIGZpCgojIFRoZSBwYXRjaGVtZSBzZWN0aW9uLiBJIGRlY2lkZWQg
dG8gbGVhdmUgaW4tbGluZSBmb3Igbm93LCBidXQgd2lsbCBwcm9iYWJseSBtb2R1bGFyaXplIGlu
dG8gYSBmdW5jdGlvbiB3aGljaCBpcyBvbmx5IGNhbGxlZCB3aXRoIHRoZSBzd2l0Y2guCiMgU3Bl
YWtpbmcgb2Ygd2hpY2gsIGlmIGEgdXNlciBzcGVjaWZpZXMgYSAnLWsnIGZsYWcgd2l0aCBhIGtl
cm5lbCwgd2UnbGwgZ2VuZXJhdGUgdGhlIHBhdGNobWUgZmlsZXMgZm9yIFF1YWx5cwogICAgaWYg
WyAhIC16ICIkS2VybmVsIiBdOyB0aGVuICAKICAgICAgICBlY2hvICJLRVJORUwgVkVSU0lPTiBT
UEVDSUZJRUQ6ICRLZXJuZWwuIEdFTkVSQVRJTkcgcGF0Y2htZS5zaC4uLiIKCiAgICAgICAgaWYg
W1sgIiRJRCIgPT0gInJoZWwiIHx8ICIkSUQiID09ICJhbXpuIiB8fCAiJElEIiA9PSAib2wiIF1d
OyB0aGVuCiAgICAgICAgICAgIGNhdCA8PEVPRiA+IC9yb290LyRDSEFOR0UvcGF0Y2htZS5zaAoj
IS9iaW4vYmFzaApuZXdrZXJuZWw9IiRLZXJuZWwiCiRwYWNrYWdlX21hbmFnZXIgaW5zdGFsbCBr
ZXJuZWwtJEtlcm5lbCAteQpyZWJvb3QKRU9GCiAgICAgICAgZWxpZiBbWyAiJElEIiA9PSAidWJ1
bnR1IiB8fCAiJElEIiA9PSAiZGViaWFuIiBdXTsgdGhlbgogICAgICAgICAgICBjYXQgPDxFT0Yg
PiAvcm9vdC8kQ0hBTkdFL3BhdGNobWUuc2gKIyEvYmluL2Jhc2gKbmV3a2VybmVsPSIkS2VybmVs
IgphcHQtZ2V0IHVwZGF0ZQphcHQtZ2V0IGluc3RhbGwgJEtlcm5lbCAteQpyZWJvb3QKRU9GCiAg
ICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICJESVNUUklCVVRJT04gTk9UIFNVUFBPUlRFRCBG
T1IgS0VSTkVMIFBBVENISU5HIgogICAgICAgICAgICByZXR1cm4gMQogICAgICAgIGZpCgogICAg
ICAgIGNobW9kICt4IC9yb290LyRDSEFOR0UvcGF0Y2htZS5zaAogICAgICAgIGVjaG8gLWUgIlww
MzNbMzJtcGF0Y2htZS5zaCBTQ1JJUFQgU1VDQ0VTU0ZVTExZIEdFTkVSQVRFRC5cMDMzWzBtIgog
ICAgICAgIHJldHVybiAKICAgIGZpCgogICAgZXhwb3J0IFBZVEhPTldBUk5JTkdTPSJpZ25vcmUi
CiAgICBsb2NhbCB0ZXN0X3JlcG9zX3Jlc3VsdD0iUEFTU0VEIgogICAgbG9jYWwgZGlza19zcGFj
ZV9jaGVja19yZXN1bHQ9IlBBU1NFRCIKCgojIEkgaGFkIHRvIGFkZCBkaXN0cm8gaWRlbnRpZmlj
YXRpb24gd2l0aGluIHRoZSBRQyBmdW5jdGlvbiBhcyBRQyBpcyBjYWxsZWQgb24gaXRzIG93bi4g
dGhlIGRpc3Ryb19iYWxsKCkgZnVuY3Rpb24gc2luJ3QgaW52b2tlZCB3aXRoIFFDLgojIFRoaXMg
d2FzIGRvbmUgdG8gZW5zdXJlIHRoZSBpbmRlcGVuZGVuY2Ugb2YgdGhlIFFDIGZ1bmN0aW9uCmNo
ZWNrX2tlcm5lbF91cGRhdGVzKCkgewogICAgaWYgWyAtZiAvZXRjL29zLXJlbGVhc2UgXTsgdGhl
bgogICAgICAgIC4gL2V0Yy9vcy1yZWxlYXNlCiAgICBlbHNlCiAgICAgICAgZWNobyAiVU5BQkxF
IFRPIElERU5USUZZIFRIRSBESVNUUklCVVRJT04gSU4gVVNFIgogICAgICAgIHJldHVybiAxCiAg
ICBmaQoKICAgIGNhc2UgJElEIGluCiAgICAgICAgdWJ1bnR1fGRlYmlhbikKICAgICAgICAgICAg
YXB0LWdldCB1cGRhdGUgPiAvZGV2L251bGwgMj4mMQogICAgICAgICAgICB1cGRhdGVzPSQoYXB0
IGxpc3QgLS11cGdyYWRhYmxlIDI+JjEgfCBncmVwICdsaW51eC1pbWFnZScpIAogICAgICAgICAg
ICBbWyAteiAiJHVwZGF0ZXMiIF1dICYmIGVjaG8gIk5PIEtFUk5FTCBVUERBVEVTIEFWQUlMQUJM
RSIgfHwgZWNobyAiJHVwZGF0ZXMiCiAgICAgICAgICAgIDs7CiAgICAgICAgcmhlbHxhbXpufG9s
KQogICAgICAgICAgICB5dW0gbGlzdCBrZXJuZWwgLS1zaG93ZHVwbGljYXRlcyB8IHRhaWwgLTUK
ICAgICAgICAgICAgOzsKICAgICAgICAqKQogICAgICAgICAgICBlY2hvICJESVNUUklCVVRJT04g
JElEIE5PVCBTVVBQT1JURUQgQlkgVEhJUyBTQ1JJUFQuIgogICAgICAgICAgICByZXR1cm4gMQog
ICAgICAgICAgICA7OwogICAgZXNhYwp9CgpjbGVhcgogICAgZWNobwogICAgZWNobyAiLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iCiAgICBlY2hvICJURVNUSU5HIFJFUE9TSVRPUlkg
RlVOQ1RJT05BTElUWSIKICAgIGVjaG8gIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
IgogICAgZWNobwoKICAgIGlmIFtbICIkcGFja2FnZV9tYW5hZ2VyIiA9PSAieXVtIiBdXTsgdGhl
bgogICAgICAgIGlmIFtbICIkVkVSU0lPTl9JRCIgPT0gNyogfHwgIiRJRCIgPT0gImFtem4iICYm
ICggIiRWRVJTSU9OX0lEIiA9PSAiMiIgfHwgIiRWRVJTSU9OX0lEIiA9PSAyMDE4KiApIF1dOyB0
aGVuCiAgICAgICAgICAgIGNsZWFuX2NtZD0ieXVtIG1ha2VjYWNoZSBmYXN0IgogICAgICAgIGVs
c2UKICAgICAgICAgICAgY2xlYW5fY21kPSJ5dW0gbWFrZWNhY2hlIC0tdGltZXIiCiAgICAgICAg
ZmkKICAgIGVsc2UKICAgICAgICBjbGVhbl9jbWQ9ImFwdC1nZXQgY2hlY2sgJiYgYXB0LWdldCBh
dXRvY2xlYW4iCiAgICBmaQoKZWNobyAiRXhlY3V0aW5nOiAkY2xlYW5fY21kIgppZiAhICRjbGVh
bl9jbWQ7IHRoZW4KICAgIGVjaG8gLWUgIlwwMzNbMzFtUUMgRkFJTEVEOiBJU1NVRSBNQUtJTkcg
Q0FDSEUuIFBPU1NJQkxZIERVRSBUTyBQRVJNSVNTSU9OIElTU1VFUywgQ09SUlVQVEVEIENBQ0hF
IEZJTEVTLCBPUiBQQUNLQUdFIE1BTkFHRVIgQ09ORklHVVJBVElPTiBFUlJPUlNcMDMzWzBtIgog
ICAgdGVzdF9yZXBvc19yZXN1bHQ9IkZBSUxFRCIKZWxzZQogICAgZWNobyAtZSAiXDAzM1szMm1R
QyBSRVBPU0lUT1JZIEZVTkNUSU9OQUxJVFkgVEVTVCBQQVNTRUQuXDAzM1swbSIKZmkKCmlmIFsg
IiR0ZXN0X3JlcG9zX3Jlc3VsdCIgPSAiRkFJTEVEIiBdOyB0aGVuCiAgICByZXR1cm4gMQpmaQoK
ICAgIGVjaG8gIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIKICAgIGVjaG8gIkNMRUFS
SU5HIFBBQ0tBR0UgTUFOQUdFUiBDQUNIRSIKICAgIGVjaG8gIi0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLSIKICAgIGVjaG8gIkV4ZWN1dGluZzogJHtwYWNrYWdlX21hbmFnZXJ9IGNsZWFu
IGFsbCIKICAgIGlmICEgYmFzaCAtYyAiJHtwYWNrYWdlX21hbmFnZXJ9IGNsZWFuIGFsbCI7IHRo
ZW4KICAgICAgICBlY2hvIC1lICJcMDMzWzMxbVFDIEZBSUxFRDogSVNTVUVTIENMRUFOSU5HIENB
Q0hFLlwwMzNbMG0iCiAgICAgICAgdGVzdF9yZXBvc19yZXN1bHQ9IkZBSUxFRCIKICAgICAgICBy
ZXR1cm4gMQogICAgZmkKCiAgICBlY2hvICItLS0tLS0tLS0tLS0tLS0tLS0tIgogICAgZWNobyAi
Q0hFQ0tJTkcgRElTSyBTUEFDRSIKICAgIGVjaG8gIi0tLS0tLS0tLS0tLS0tLS0tLS0iCiAgICBs
b2NhbCB2YXJfc3BhY2U9JChkZiAtQkcgL3ZhciB8IHRhaWwgLTEgfCBhd2sgJ3twcmludCAkNH0n
IHwgc2VkICdzL0cvLycpCiAgICBpZiBbWyAiJHZhcl9zcGFjZSIgLWx0IDMgXV07IHRoZW4KICAg
ICAgICBlY2hvICJRQyBESVNLIFNQQUNFIENIRUNLIEZBSUxFRDogTEVTUyBUSEFOIDNHQiBBVkFJ
TEFCTEUgSU4gL3ZhciIKICAgICAgICB0ZXN0X3JlcG9zX3Jlc3VsdD0iRkFJTEVEIgogICAgICAg
IGVjaG8gIlBMRUFTRSBSRVZJRVcgRElTSyBTUEFDRSIKICAgICAgICBkZiAtQkcgL3ZhcgogICAg
ICAgIHNsZWVwIDIKICAgICAgICByZXR1cm4gMQogICAgZWxzZQogICAgICAgIGVjaG8gIlNVRkZJ
Q0lFTlQgRElTSyBTUEFDRSBJTiAvdmFyLiBQUk9DRUVESU5HIFdJVEggVEhFIFNDUklQVC4iCiAg
ICAgICAgZGYgLUJHIC92YXIKICAgICAgICBzbGVlcCAyCiAgICBmaQoKICAgIGVjaG8gLWUgIlww
MzNbMzJtUUMgUEFTU0VEIEZPUiBESVNLIFNQQUNFXDAzM1swbSIKCiAgICBlY2hvICItLS0tLS0t
LS0tLS0tLS0tLS0tLSIKICAgIGVjaG8gIkdFTkVSQVRJTkcgUUMgUkVQT1JUIgogICAgZWNobyAi
LS0tLS0tLS0tLS0tLS0tLS0tLS0iCiAgICBzbGVlcCA1CgppZiBbWyAkc2lsZW50X21vZGUgLWVx
IDEgXV07IHRoZW4KICAgICAgICBleGVjIDE+JjMgMj4mNCAgIyBSZXN0b3JlIHN0YW5kYXJkIG91
dHB1dCBhbmQgc3RhbmRhcmQgZXJyb3IKICAgIGZpCgogICAgewogICAgICAgIGVjaG8gLWUgIlww
MzNbMzNtPT09PT0gUUMgcmVwb3J0IGZvciAkKGhvc3RuYW1lIC1zKSA9PT09PVwwMzNbMG0iCiAg
ICAgICAgZWNobyAiKEN1cnJlbnQgZGF0ZSk6ICQoZGF0ZSkiCiAgICAgICAgZWNobyAiKFNlcnZl
ciBydW5uaW5nIHNpbmNlKTogJCh1cHRpbWUpIgogICAgICAgIGVjaG8gIihDdXJyZW50IHJ1bm5p
bmcga2VybmVsIHZlcnNpb24pOiAkKHVuYW1lIC1yKSIKICAgICAgICAvb3B0L0Nyb3dkU3RyaWtl
L2ZhbGNvbmN0bCAtZyAtLXJmbS1zdGF0ZSAyPi9kZXYvbnVsbCB8IGdyZXAgLXEgJ3JmbS1zdGF0
ZT1mYWxzZScgJiYgZWNobyAiKElzIENyb3dkc3RyaWtlIHJ1bm5pbmcpOiBZZXMiIHx8IGVjaG8g
IihJcyBDcm93ZHN0cmlrZSBydW5uaW5nKTogTm8iCiAgICAgICAgZWNobyAiKEN1cnJlbnQgQ3Jv
d2RzdHJpa2UgVmVyc2lvbik6ICQoL29wdC9Dcm93ZFN0cmlrZS9mYWxjb25jdGwgLWcgLS12ZXJz
aW9uIDI+L2Rldi9udWxsKSIKICAgICAgICBlY2hvICIoQXZhaWxhYmxlIEtlcm5lbCBVcGRhdGVz
KToiCiAgICAgICAgZWNobyAiJChjaGVja19rZXJuZWxfdXBkYXRlcykiCiAgICAgICAgZWNobyAi
KFRlc3QgUmVwb3NpdG9yaWVzIFJlc3VsdCk6ICR0ZXN0X3JlcG9zX3Jlc3VsdCIKICAgICAgICBl
Y2hvICIoRGlzayBTcGFjZSBDaGVjayBSZXN1bHQpOiAkZGlza19zcGFjZV9jaGVja19yZXN1bHQi
CiAgICAgICAgZWNobyAtZSAiXDAzM1szM209PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09XDAzM1swbSIKICAgIH0gfCB0ZWUgIi9yb290LyRDSEFOR0UvcWNfcmVwb3J0LnR4
dCIKfQoKIyBXaGVuIHlvdSBwYXRjaCBhbiBpbnN0YW5jZSwgdGhpcyBpcyB3aGVyZSB0aGUgZGly
ZWN0aW9uYWwgZmxvdyBoYXBwZW5zLiBUaGUgYmVnaW5uaW5nIG9mLi4udGhlIGpvYi4KcHJlX3Jl
Ym9vdF9vcGVyYXRpb25zKCkgewogICAgZm91bmRfbWFya2VyPSQoZmluZCAvcm9vdC8kQ0hBTkdF
IC1uYW1lICJzY3JpcHRfcmVib290X21hcmtlciIgLXByaW50IC1xdWl0KQoKICAgIGlmIFsgLXog
IiRmb3VuZF9tYXJrZXIiIF07IHRoZW4KICAgICAgICBlY2hvICJQRVJGT1JNSU5HIFBSRS1SRUJP
T1QgT1BFUkFUSU9OUy4uLiIKICAgICAgICAKICAgICAgICB0ZW1wX2ZpbGU9Ii9yb290LyRDSEFO
R0Uvc2NyaXB0X3JlYm9vdF9tYXJrZXIiCiAgICAgICAgCiAgICAgICAgdG91Y2ggJHRlbXBfZmls
ZQogICAgICAgIGVjaG8gIiRDSEFOR0UiID4gIiR0ZW1wX2ZpbGUiCgogICAgICAgIGlmIFsgLW4g
IiRDSEFOR0UiIF07IHRoZW4KICAgICAgICAgICAgZWNobyAiJENIQU5HRSIgPiAkdGVtcF9maWxl
CiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvICJDSEFOR0UgVkFSSUFCTEUgSVMgTk9UIFNF
VCIKICAgICAgICBmaQoKICAgICAgICBbIC1kICIvcm9vdC8kQ0hBTkdFIiBdIHx8IG1rZGlyIC1w
ICIvcm9vdC8kQ0hBTkdFIgoKICAgICAgICAjIFFDLCBDb21tZW50ZWQgb3V0IGFzIG5vdCBuZWNl
c3NhcnkgdG8gcnVuIHdoZW4gcGF0Y2hpbmcsIHNob3VsZCBiZSB0cmVhdGVkIHNlcGFyYXRlbHku
Li5idXQganVzdCBpbiBjYXNlCiAgICAgICAgL29wdC9Dcm93ZFN0cmlrZS9mYWxjb25jdGwgLWcg
LS1yZm0tc3RhdGUgMj4vZGV2L251bGwgfCBncmVwIC1xICdyZm0tc3RhdGU9ZmFsc2UnICYmIGVj
aG8gIklzIENyb3dkc3RyaWtlIHJ1bm5pbmc6IFllcyIgfHwgZWNobyAiSXMgQ3Jvd2RzdHJpa2Ug
cnVubmluZzogTm8iCiAgICAgICAgZWNobyAiQ3Jvd2RzdHJpa2U6ICQoL29wdC9Dcm93ZFN0cmlr
ZS9mYWxjb25jdGwgLWcgLS12ZXJzaW9uIDI+L2Rldi9udWxsKSIKICAgICAgICBlY2hvICJGYWxj
b24gS2VybmVsIENoZWNrOiAkKC9vcHQvQ3Jvd2RTdHJpa2UvZmFsY29uLWtlcm5lbC1jaGVjayAy
Pi9kZXYvbnVsbCkiCiAgICAgICAgZGlzdHJvX2JhbGwKICAgICAgICBiZWZvcmVfbWFya2Vycwog
ICAgICAgIG1vZGVybml6ZQoKICAgICAgICBpZiBbWyAiJHJlYm9vdF9mbGFnIiAtZXEgMSBdXTsg
dGhlbgogICAgICAgICAgICBlY2hvCiAgICAgICAgICAgIGVjaG8gLWUgIlwwMzNbMzJtUkVCT09U
SU5HIE5PVy4uLlwwMzNbMG0iCiAgICAgICAgICAgIGVjaG8KICAgICAgICAgICAgcmVib290CiAg
ICAgICAgZWxzZQogICAgICAgICAgICBlY2hvCiAgICAgICAgICAgIGVjaG8gLWUgIlwwMzNbMzFt
UkVCT09UIE5PVCBSRVFVRVNURUQuIENPTVBMRVRJTkcgT1BFUkFUSU9OUyBXSVRIT1VUIEEgUkVC
T09ULlwwMzNbMG0iCiAgICAgICAgICAgIGVjaG8KICAgICAgICBmaQogICAgZWxzZQogICAgICAg
IHBvc3RfcmVib290X29wZXJhdGlvbnMKICAgIGZpCn0KCnBvc3RfcmVib290X29wZXJhdGlvbnMo
KSB7CiAgICBjbGVhcgpmb3VuZF9tYXJrZXI9JChmaW5kIC9yb290LyRDSEFOR0UgLW5hbWUgInNj
cmlwdF9yZWJvb3RfbWFya2VyIiAtcHJpbnQgLXF1aXQpCmNvbG9ycz0oMzEgMzIgMzMgMzQgMzUg
MzYpCgphbmltYXRlX3RleHQoKSB7CiAgICBsb2NhbCB0ZXh0PSJQT1NUIFJFQk9PVCBPUEVSQVRJ
T05TIFNFUVVFTkNFIElOSVRJQVRFRC4uLiIKICAgIGxvY2FsIGRlbGF5PTAuMiAKICAgIGxvY2Fs
IGR1cmF0aW9uPTMKICAgIGxvY2FsIGVuZF90aW1lPSQoKFNFQ09ORFMgKyBkdXJhdGlvbikpIAoK
ICAgIGVjaG8gLW5lICJcclwwMzNbSyIKCiAgICB3aGlsZSBbICRTRUNPTkRTIC1sdCAkZW5kX3Rp
bWUgXTsgZG8KICAgICAgICBmb3IgY29sb3IgaW4gIiR7Y29sb3JzW0BdfSI7IGRvCiAgICAgICAg
ICAgIGlmIFsgJFNFQ09ORFMgLWdlICRlbmRfdGltZSBdOyB0aGVuCiAgICAgICAgICAgICAgICBi
cmVhawogICAgICAgICAgICBmaQogICAgICAgICAgICBlY2hvIC1uZSAiXDAzM1ske2NvbG9yfW0k
e3RleHR9XDAzM1swbSIKICAgICAgICAgICAgc2xlZXAgJGRlbGF5CiAgICAgICAgICAgIGVjaG8g
LW5lICJcclwwMzNbSyIKICAgICAgICBkb25lCiAgICBkb25lCn0KCiAgICBhbmltYXRlX3RleHQK
ICAgIGRpc3Ryb19iYWxsCiAgICBhZnRlcl9tYXJrZXJzCiAgICBwb3N0X3NlY3VyaXR5X29wCiAg
ICBtYWludGVuYW5jZV9yZXBvcnQKICAgIHJtIC1mICIkZm91bmRfbWFya2VyIgp9CgphdXRvX21v
ZGUgKCkgewoKaWYgWyAteiAiJENIQU5HRSIgXTsgdGhlbgogICAgZWNobyAiRXJyb3I6IENIQU5H
RSB2YXJpYWJsZSBub3Qgc2V0LiBVc2UgdGhlIC1jIGZsYWcgdG8gc2V0IGl0LiIKICAgIGV4aXQg
MQpmaQoKY2xlYXIKY29sb3JzPSgzMSAzMiAzMyAzNCAzNSAzNikKCmFuaW1hdGVfdGV4dCgpIHsK
ICAgIGxvY2FsIHRleHQ9IkFVVE9NQVRFRCBQQVRDSCBTRVFVRU5DRSBJTklUSUFURUQuLi4iCiAg
ICBsb2NhbCBkZWxheT0wLjIgCiAgICBsb2NhbCBkdXJhdGlvbj0zCiAgICBsb2NhbCBlbmRfdGlt
ZT0kKChTRUNPTkRTICsgZHVyYXRpb24pKSAKCiAgICBlY2hvIC1uZSAiXHJcMDMzW0siCgogICAg
d2hpbGUgWyAkU0VDT05EUyAtbHQgJGVuZF90aW1lIF07IGRvCiAgICAgICAgZm9yIGNvbG9yIGlu
ICIke2NvbG9yc1tAXX0iOyBkbwogICAgICAgICAgICBpZiBbICRTRUNPTkRTIC1nZSAkZW5kX3Rp
bWUgXTsgdGhlbgogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZmkKICAgICAgICAg
ICAgZWNobyAtbmUgIlwwMzNbJHtjb2xvcn1tJHt0ZXh0fVwwMzNbMG0iCiAgICAgICAgICAgIHNs
ZWVwICRkZWxheQogICAgICAgICAgICBlY2hvIC1uZSAiXHJcMDMzW0siCiAgICAgICAgZG9uZQog
ICAgZG9uZQp9CgogICAgYW5pbWF0ZV90ZXh0CiAgICBwcmVfcmVib290X29wZXJhdGlvbnMKfQoK
cmVib290X2ZsYWc9MCAKCiMgTm90ZSEgVGhlIHJlYm9vdCBzd2l0Y2ggbXVzdCBiZSBiZWZvcmUg
YW55IG90aGVyIGZsYWcKd2hpbGUgZ2V0b3B0cyAiYzpxYXBocms6cyIgb3B0OyBkbwogICAgY2Fz
ZSAkb3B0IGluCiAgICAgICAgcikgcmVib290X2ZsYWc9MQogICAgICAgICAgIDs7CiAgICAgICAg
YykgQ0hBTkdFPSIkT1BUQVJHIgogICAgICAgICAgIG1rZGlyIC1wIC9yb290LyIkQ0hBTkdFIgog
ICAgICAgICAgIDs7CiAgICAgICAgaykgS2VybmVsPSIkT1BUQVJHIgogICAgICAgICAgIDs7CiAg
ICAgICAgcSkgUUMKICAgICAgICAgICBleGl0IDAKICAgICAgICAgICA7OwogICAgICAgIGEpIGF1
dG9fbW9kZQogICAgICAgICAgIGV4aXQgMAogICAgICAgICAgIDs7CiAgICAgICAgcCkgaWYgWyAt
ZiAiL3Jvb3QvJENIQU5HRS9zY3JpcHRfcmVib290X21hcmtlciIgXTsgdGhlbgogICAgICAgICAg
ICAgICBwb3N0X3JlYm9vdF9vcGVyYXRpb25zCiAgICAgICAgICAgZWxzZQogICAgICAgICAgICAg
ICBlY2hvICJObyByZWJvb3QgbWFya2VyIGZvdW5kLiBFeGl0aW5nLiIKICAgICAgICAgICBmaQog
ICAgICAgICAgIGV4aXQgMAogICAgICAgICAgIDs7CiAgICAgICAgcykgc2lsZW50X21vZGU9MQog
ICAgICAgICAgIDs7CiAgICAgICAgaCkgZWNobyAiVXNhZ2U6ICQwIFstciBSZWJvb3QuIE11c3Qg
c3BlY2lmeSBiZWZvcmUgLWEgYW5kIC1rIHN3aXRjaCBdIFstYyBDaGFuZ2UgVGlja2V0XSBbLXEg
UUMgT25seV0gWy1hIEF1dG9tYXRpYyBNb2RlLiBUbyBydW4gc2VjdXJpdHkgcGF0Y2hpbmddIFst
cCBQb3N0IFJlYm9vdCBPcGVyYXRpb25zXSBbLWggSGVscF0gWy12IFZlcnNpb25dIFstayBLZXJu
ZWwgVmVyc2lvbl0gWy1zIFNpbGVudCBNb2RlXSIKICAgICAgICAgICBleGl0IDAKICAgICAgICAg
ICA7OwogICAgICAgICopIGVjaG8gIkludmFsaWQgb3B0aW9uOiAtJE9QVEFSRyIgPiYyCiAgICAg
ICAgICAgZXhpdCAxCiAgICAgICAgICAgOzsKICAgIGVzYWMKZG9uZQoKaWYgWyAteiAiJENIQU5H
RSIgXTsgdGhlbgogICAgZWNobyAiRXJyb3I6IENIQU5HRSB2YXJpYWJsZSBub3Qgc2V0LiBVc2Ug
dGhlIC1jIGZsYWcgdG8gc2V0IGl0LiIKICAgIGV4aXQgMQpmaQoKUUMKCg=="

# I incorporated my getids.sh OG script here, which will convert tag names to instance IDs. It's annooying to do so otherwise.
convert_tags_to_ids() {
    local region="$1"
    local file_path="$2"

    # Working the user's input file & storing the output in a variable
    local tagNames
    if [ ! -f "$file_path" ]; then
        echo "File not found: $file_path"
        exit 1
    fi
    tagNames=$(tr ',' '\n' < "$file_path")

    # Initialize an array to store instance IDs
    local instance_ids=()

    # Looping through each tag name provided by the user
    for tagName in $tagNames; do
        instanceIds=$(aws ec2 describe-instances --region "$region" --filters "Name=tag:Name,Values=$tagName" --query 'Reservations[*].Instances[*].[InstanceId]' --output text)
        if [ -z "$instanceIds" ]; then
            echo "No instances found with tag name: $tagName in region $region"
        else
            for id in $instanceIds; do
                instance_ids+=("$id")
            done
        fi
    done

    # Here, we're writing the instance IDs to a temp scratch file
    instance_ids_file=$(mktemp)
    printf "%s\n" "${instance_ids[@]}" > "$instance_ids_file"
    echo "$instance_ids_file"
}

# Added this instance state checker to fail out and continue past those instances
check_instance_state() {
    local instance_id=$1
    local region=$2

    instance_state=$(aws ec2 describe-instances --instance-ids "$instance_id" --region "$region" --query "Reservations[*].Instances[*].State.Name" --output text)

    if [[ "$instance_state" == "running" ]]; then
        return 0
    else
        echo "Instance $instance_id is not in a valid state (Current state: $instance_state). Skipping..."
        return 1
    fi
}

function get_recent_updates_logs {
    local distro_type=$1

    local end_date=$(date +"%Y-%m-%d")
    local start_date=$(date -d "-7 days" +"%Y-%m-%d")

    if [[ "$distro_type" -eq 1 ]]; then
        # Check if dnf is available; if not, fall back to yum
        if command -v dnf &>/dev/null; then
            echo "sudo dnf history list | grep 'Upgrade' | awk -v date=\"$start_date\" '\$4 >= date {print \$0}'"
        else
            echo "sudo yum history list | grep 'Update' | awk -v date=\"$start_date\" '\$5 >= date {print \$0}'"
        fi
    else
        echo "sudo awk '\$0 >= \"$start_date\" && \$0 <= \"$end_date\"' /var/log/apt/history.log"
    fi
}

# Unpacking Linux Patcher, then running in quiet mode to grab the output for the user to paste in their change notes. I've added a log feature for when this is run, see below.
function run_linux_patcher {
    local instance_id=$1
    local region=$2
    local change_number=$3

    # Decode base64 payload and run the linux patcher script
    local decode_command="echo \"$LINUX_PATCHER_B64\" | base64 -d > /tmp/Linux_Patcher_v258-b.sh && chmod +x /tmp/Linux_Patcher_v258-b.sh"
    local patcher_command="sudo bash /tmp/Linux_Patcher_v258-b.sh -c $change_number -s > /tmp/linux_patcher_output.log 2>&1"
    local view_log_command="cat /tmp/linux_patcher_output.log"

    local combined_command="$decode_command && $patcher_command && $view_log_command"

    # This was a little dirty. I had to escape the combined commands for JSON to ensure proper quotation as it will hang things up otherwise.
    escaped_command=$(printf "%s" "$combined_command" | sed 's/"/\\"/g')

    # Sending the command(s) using AWS SSM
    command_id=$(aws ssm send-command \
        --instance-ids "$instance_id" \
        --document-name "AWS-RunShellScript" \
        --timeout-seconds 600 \
        --parameters commands="[\"$escaped_command\"]" \
        --query 'Command.CommandId' \
        --output text --region "$region")

    # Waiting for the command to complete then grabbing output
    for attempt in {1..5}; do
        output=$(aws ssm get-command-invocation \
            --command-id "$command_id" \
            --instance-id "$instance_id" \
            --region "$region" \
            --query 'StandardOutputContent' \
            --output text 2>/dev/null)

        error_output=$(aws ssm get-command-invocation \
            --command-id "$command_id" \
            --instance-id "$instance_id" \
            --region "$region" \
            --query 'StandardErrorContent' \
            --output text 2>/dev/null)

        if [[ -n "$output" && "$output" != "None" ]]; then
            echo "$output"
            break
        elif [[ -n "$error_output" && "$error_output" != "None" ]]; then
            echo "Error output: $error_output"
            break
        else
            if [[ "$verbose" -eq 1 ]]; then
                echo "Waiting for command invocation to be available... (Attempt $attempt)"
            fi
            sleep 5
        fi
    done

    # Added this to check if output was retrieved (STDOUT) if not, you'll get the following warning and there may be something amiss. Don't forget to check the $CHANGE/qc_report.txt file!
    if [[ -z "$output" || "$output" == "None" ]]; then
        echo "No output retrieved from instance $instance_id. Please check if the report exists and contains data."
    fi
}

#This is for the other option to just run check-up commands. A holdover from previous iterations of doubletake
function get_instance_info {
    local region=$1
    local distro_type=$2
    shift 2
    local instance_ids=("$@")

    declare -A commands
    commands=(
        ["Uptime"]="sudo uptime"
        ["Last_Five_Reboots"]="sudo last reboot | head -5"
        ["Kernel_Version"]="sudo uname -r"
        ["Updates_In_Last_7_Days"]="$(get_recent_updates_logs "$distro_type")"
        ["Crowdstrike_Version"]='sudo echo "(Current Crowdstrike Version): $(/opt/CrowdStrike/falconctl -g --version 2>/dev/null)"'
        ["Crowdstrike_Status"]='sudo /opt/CrowdStrike/falconctl -g --rfm-state 2>/dev/null | grep -q "rfm-state=false" && echo "(Is Crowdstrike running): Yes" || echo "(Is Crowdstrike running): No"'
    )

    for instance_id in "${instance_ids[@]}"; do
        echo -e "\nReport for Instance ID: $instance_id"

        # Again, checking if the instance is in a valid state for SSM. I will work towards consolidating the two times I call for this, as a pre-requisite to running anything
        if check_instance_state "$instance_id" "$region"; then
            for info in "${!commands[@]}"; do
                command="${commands[$info]}"
                # Same as before, I had to escape the combined commands for JSON to ensure proper quotation as it will hang things up otherwise.
                escaped_command=$(printf '%s' "$command" | sed 's/"/\\"/g')
                output=$(aws ssm send-command \
                    --instance-ids "$instance_id" \
                    --document-name "AWS-RunShellScript" \
                    --timeout-seconds 600 \
                    --parameters commands="[\"$escaped_command\"]" \
                    --query 'Command.CommandId' \
                    --output text --region "$region")

                command_id="$output"

                for attempt in {1..5}; do
                    output=$(aws.ssm get-command-invocation \
                        --command-id "$command_id" \
                        --instance-id "$instance_id" \
                        --region "$region" \
                        --query 'StandardOutputContent' \
                        --output text 2>/dev/null)

                    if [[ -n "$output" && "$output" != "None" ]]; then
                        echo "  $info: $output"
                        break
                    else
                        if [[ "$verbose" -eq 1 ]]; then
                            echo "Waiting for command invocation to be available... (Attempt $attempt)"
                        fi
                        sleep 5
                    fi
                done

                if [[ -z "$output" || "$output" == "None" ]]; then
                    echo "  $info: Command execution failed or no data returned."
                fi
            done
        fi
        echo -e "\n"
    done
}

# Where it all begins. Used main as an ode to python since I wrote this in bash, lol
function main {
    while true; do
        read -p "Enter the path to the file with instance IDs or tag names: " file_path

        echo "Does the list contain:"
        echo "1. AWS Instance IDs"
        echo "2. AWS Instance Tag Names"
        read -p "Enter option 1 or 2: " id_or_tag

        echo "Select the type of Linux distribution:"
        echo "1. Red Hat, AWS, Oracle"
        echo "2. Ubuntu/Debian"
        read -p "Enter option 1 or 2: " distro_type

        echo "Select the type of AWS account:"
        echo "1. Commercial"
        echo "2. Government"
        read -p "Enter option 1 or 2: " account_type

        if [[ "$account_type" -eq 1 ]]; then
            regions=('us-east-1' 'us-east-2' 'us-west-1' 'us-west-2')
        else
            regions=('us-gov-west-1' 'us-gov-east-1')
        fi

        echo "Available regions based on account type:"
        for i in "${!regions[@]}"; do
            echo "$((i + 1)). ${regions[$i]}"
        done
        read -p "Select the region number: " region_index
        region=${regions[$((region_index - 1))]}

        if [[ "$id_or_tag" -eq 1 ]]; then
            mapfile -t instance_ids < "$file_path"
            break
        elif [[ "$id_or_tag" -eq 2 ]]; then
            temp_instance_ids_file=$(convert_tags_to_ids "$region" "$file_path")
            mapfile -t instance_ids < "$temp_instance_ids_file"
            rm "$temp_instance_ids_file"
            break
        else
            echo "Invalid option. Please try again."
        fi
    done

    echo "Choose an operation:"
    echo "1. Run normal commands"
    echo "2. Perform QC with Linux_Patcher"
    read -p "Enter option 1 or 2: " operation

    if [[ "$operation" -eq 1 ]]; then
        get_instance_info "$region" "$distro_type" "${instance_ids[@]}"
    elif [[ "$operation" -eq 2 ]]; then
        read -p "Enter the ServiceNow change number: " change_number
        for instance_id in "${instance_ids[@]}"; do
            echo -e "\nPerforming QC for Instance ID: $instance_id"

            if check_instance_state "$instance_id" "$region"; then
                run_linux_patcher "$instance_id" "$region" "$change_number"
            fi
        done
    else
        echo "Invalid option selected."
    fi
}

main
